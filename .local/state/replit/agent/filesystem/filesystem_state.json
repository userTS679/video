{"file_contents":{"VideoHive/README.md":{"content":"# ChillConnect - Gen-Z Social Video App\n\nA cross-platform social video calling app that combines random 1:1 video calling with mutual friend connections, built for Gen-Z users in India.\n\n## Features\n\n- 🎥 Random 1:1 video calling (Omegle style)\n- 👫 Mutual friend opt-in system (Tinder/Bumble style)\n- 🎮 In-call mini-games and icebreakers\n- 🤖 AI-powered moderation and wingman features\n- 🔒 Privacy-first with selfie verification\n- 📱 Cross-platform (Web + iOS + Android)\n\n## Tech Stack\n\n- **Frontend**: Expo (React Native) + React Native Web + TypeScript + Zustand\n- **Backend**: Supabase (Postgres, Auth, Realtime, Storage)\n- **Video**: Agora SDK for real-time video calling\n- **AI**: Groq for moderation and icebreaker generation\n- **Deployment**: Expo for mobile, Vercel for web, Supabase Edge Functions\n\n## Environment Variables\n\nCreate a `.env.local` file with:\n\n```env\n# Supabase\nEXPO_PUBLIC_SUPABASE_URL=your_supabase_project_url\nEXPO_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key\nSUPABASE_SERVICE_ROLE_KEY=your_service_role_key\n\n# Agora\nEXPO_PUBLIC_AGORA_APP_ID=your_agora_app_id\nAGORA_APP_CERTIFICATE=your_agora_certificate\n\n# Groq\nGROQ_API_KEY=your_groq_api_key\nGROQ_MODEL=llama-3.2-90b-text-preview\n\n# Optional\nJWT_SECRET=your_jwt_secret\nSENTRY_DSN=your_sentry_dsn\n```\n\n## Quick Start\n\n1. **Setup Supabase Project**\n   - Create a new Supabase project\n   - Run the SQL migrations from `supabase/migrations/`\n   - Enable Row Level Security\n   - Configure authentication providers\n\n2. **Setup Agora**\n   - Create an Agora project\n   - Get your App ID and Certificate\n   - Enable real-time messaging\n\n3. **Setup Groq**\n   - Get API key from Groq\n   - Choose appropriate model for text generation\n\n4. **Install Dependencies**\n   ```bash\n   npm install\n   ```\n\n5. **Start Development**\n   ```bash\n   # Start Expo development server\n   npm run dev\n   \n   # For web only\n   npm run web\n   \n   # For iOS simulator\n   npm run ios\n   \n   # For Android emulator  \n   npm run android\n   ```\n\n## Project Structure\n\n```\n├── app/                    # Expo Router pages\n│   ├── (auth)/            # Authentication flow\n│   ├── (tabs)/            # Main app tabs\n│   ├── calling/           # Video calling screens\n│   └── chat/              # Chat screens\n├── components/            # Reusable components\n├── hooks/                 # Custom hooks\n├── lib/                   # Utilities and configurations\n├── store/                 # Zustand state management\n├── supabase/              # Database migrations and types\n├── tests/                 # Unit and integration tests\n└── api/                   # Serverless functions (if needed)\n```\n\n## Key Features Implementation\n\n### 1. Authentication & Onboarding\n- Email/phone signup via Supabase Auth\n- Profile setup with interests and preferences\n- Selfie verification for safety\n\n### 2. Video Calling System\n- Random matching based on filters\n- Blurred preview with mutual confirmation\n- Agora SDK for high-quality video/audio\n\n### 3. Mini-Games\n- Rock Paper Scissors\n- Quick Trivia\n- Emoji Guessing Game\n\n### 4. Mutual Friend System\n- Private friend button presses\n- Only mutual presses create friendships\n- No notifications for single-sided presses\n\n### 5. AI Features\n- Groq-powered icebreaker suggestions\n- Automated content moderation\n- AI wingman for conversation starters\n\n### 6. Safety & Privacy\n- Report and block functionality\n- Automatic moderation pipeline\n- Panic exit button\n- Selfie verification\n\n## Database Schema\n\nThe app uses the following main tables:\n- `users` - User profiles and verification status\n- `user_preferences` - Matching filters and preferences\n- `calls` - Call history and friend press tracking\n- `friendships` - Mutual friend relationships\n- `conversations` & `messages` - Chat system\n- `reports` - Safety reporting system\n\n## Testing\n\n```bash\n# Run unit tests\nnpm test\n\n# Run with coverage\nnpm run test:coverage\n\n# Run E2E tests\nnpm run test:e2e\n```\n\n## Deployment\n\n### Web Deployment\n```bash\nnpm run build:web\n# Deploy to Vercel/Netlify\n```\n\n### Mobile Deployment\n```bash\n# Build for app stores\nnpx eas build --platform all\n\n# Submit to stores\nnpx eas submit --platform all\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Implement changes with tests\n4. Submit a pull request\n\n## License\n\nMIT License - see LICENSE file for details\n\n## Support\n\nFor issues and support, please open a GitHub issue or contact the development team.\n\n---\n\nBuilt with ❤️ for Gen-Z India","size_bytes":4570},"VideoHive/jest-setup.js":{"content":"import 'react-native-gesture-handler/jestSetup';\n\n// Mock react-native-reanimated\njest.mock('react-native-reanimated', () => {\n  const Reanimated = require('react-native-reanimated/mock');\n  Reanimated.default.call = () => {};\n  return Reanimated;\n});\n\n// Mock expo modules\njest.mock('expo-constants', () => ({\n  default: {\n    appOwnership: 'standalone',\n  },\n}));\n\njest.mock('expo-router', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n  }),\n  router: {\n    push: jest.fn(),\n    replace: jest.fn(),\n    back: jest.fn(),\n  },\n  Link: 'Link',\n  Stack: {\n    Screen: 'Stack.Screen',\n  },\n  Tabs: {\n    Screen: 'Tabs.Screen',\n  },\n}));\n\njest.mock('expo-status-bar', () => ({\n  StatusBar: 'StatusBar',\n}));\n\n// Silence the warning: Animated: `useNativeDriver` is not supported\njest.mock('react-native/Libraries/Animated/NativeAnimatedHelper');","size_bytes":891},"VideoHive/jest.config.js":{"content":"module.exports = {\n  preset: 'jest-expo',\n  setupFilesAfterEnv: ['<rootDir>/jest-setup.js'],\n  testMatch: [\n    '<rootDir>/tests/**/*.test.(js|ts|tsx)',\n  ],\n  collectCoverageFrom: [\n    'store/**/*.{js,ts,tsx}',\n    'lib/**/*.{js,ts,tsx}',\n    'components/**/*.{js,ts,tsx}',\n    '!**/*.d.ts',\n    '!**/node_modules/**',\n  ],\n  coverageReporters: ['text', 'lcov', 'html'],\n  moduleNameMapping: {\n    '^@/(.*)$': '<rootDir>/$1',\n  },\n  transform: {\n    '^.+\\\\.(js|ts|tsx)$': 'babel-jest',\n  },\n  transformIgnorePatterns: [\n    'node_modules/(?!(jest-)?react-native|@react-native|expo|@expo|@unimodules|unimodules|sentry-expo|native-base|react-navigation|@react-navigation)',\n  ],\n};","size_bytes":681},"VideoHive/app/+not-found.tsx":{"content":"import { Link, Stack } from 'expo-router';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport default function NotFoundScreen() {\n  return (\n    <>\n      <Stack.Screen options={{ title: 'Oops!' }} />\n      <View style={styles.container}>\n        <Text style={styles.text}>This screen doesn't exist.</Text>\n        <Link href=\"/\" style={styles.link}>\n          <Text>Go to home screen!</Text>\n        </Link>\n      </View>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  text: {\n    fontSize: 20,\n    fontWeight: 600,\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n});\n","size_bytes":708},"VideoHive/app/_layout.tsx":{"content":"import { useEffect } from 'react';\nimport { Stack } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\nimport { useFrameworkReady } from '@/hooks/useFrameworkReady';\nimport { useAuthStore } from '@/store/authStore';\n\nexport default function RootLayout() {\n  useFrameworkReady();\n  \n  const { initialize, isLoading, isAuthenticated } = useAuthStore();\n\n  useEffect(() => {\n    initialize();\n  }, []);\n\n  if (isLoading) {\n    return null; // Show loading screen in production\n  }\n\n  return (\n    <>\n      <Stack screenOptions={{ headerShown: false }}>\n        {!isAuthenticated ? (\n          <>\n            <Stack.Screen name=\"(auth)\" />\n          </>\n        ) : (\n          <>\n            <Stack.Screen name=\"(tabs)\" />\n            <Stack.Screen name=\"calling\" />\n            <Stack.Screen name=\"chat\" />\n          </>\n        )}\n        <Stack.Screen name=\"+not-found\" />\n      </Stack>\n      <StatusBar style=\"auto\" />\n    </>\n  );\n}","size_bytes":949},"VideoHive/hooks/useFrameworkReady.ts":{"content":"import { useEffect } from 'react';\n\ndeclare global {\n  interface Window {\n    frameworkReady?: () => void;\n  }\n}\n\nexport function useFrameworkReady() {\n  useEffect(() => {\n    window.frameworkReady?.();\n  });\n}\n","size_bytes":211},"VideoHive/lib/agora.ts":{"content":"// Agora configuration and utilities\n\nexport const AGORA_CONFIG = {\n  appId: process.env.EXPO_PUBLIC_AGORA_APP_ID || 'your-agora-app-id',\n  certificate: process.env.AGORA_APP_CERTIFICATE || 'your-agora-certificate',\n};\n\n// Agora token generation (server-side only)\nexport interface AgoraTokenRequest {\n  channelName: string;\n  uid: string;\n  role: 'host' | 'audience';\n}\n\nexport interface AgoraTokenResponse {\n  token: string;\n  channelName: string;\n  uid: string;\n  expireTime: number;\n}\n\n// Client-side Agora utilities\nexport const generateChannelName = (): string => {\n  return `call_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n};\n\nexport const generateUID = (): number => {\n  return Math.floor(Math.random() * 1000000);\n};\n\n// Mock Agora token for development\nexport const getMockAgoraToken = (channelName: string, uid: string): AgoraTokenResponse => {\n  return {\n    token: `mock_token_${channelName}_${uid}`,\n    channelName,\n    uid,\n    expireTime: Date.now() + 3600000, // 1 hour\n  };\n};","size_bytes":1011},"VideoHive/lib/groq.ts":{"content":"// Groq AI integration for moderation and icebreakers\n\nexport interface GroqModerationRequest {\n  content: string;\n  type: 'text' | 'image';\n  userId?: string;\n}\n\nexport interface GroqModerationResponse {\n  safe: boolean;\n  confidence: number;\n  categories: string[];\n  reason?: string;\n  actionRequired: 'none' | 'review' | 'block';\n}\n\nexport interface GroqIcebreakerRequest {\n  userAInterests: string[];\n  userBInterests: string[];\n  context?: string;\n  language?: string;\n}\n\nexport interface GroqIcebreakerResponse {\n  icebreakers: string[];\n  confidence: number;\n}\n\n// Mock implementations for development\nexport const mockModeration = async (request: GroqModerationRequest): Promise<GroqModerationResponse> => {\n  // Simple mock moderation\n  const flaggedWords = ['spam', 'inappropriate', 'fake'];\n  const containsFlagged = flaggedWords.some(word => \n    request.content.toLowerCase().includes(word)\n  );\n\n  return {\n    safe: !containsFlagged,\n    confidence: containsFlagged ? 0.9 : 0.1,\n    categories: containsFlagged ? ['spam'] : [],\n    reason: containsFlagged ? 'Contains flagged content' : undefined,\n    actionRequired: containsFlagged ? 'review' : 'none',\n  };\n};\n\nexport const mockIcebreakerGeneration = async (request: GroqIcebreakerRequest): Promise<GroqIcebreakerResponse> => {\n  const commonInterests = request.userAInterests.filter(interest => \n    request.userBInterests.includes(interest)\n  );\n\n  const fallbackIcebreakers = [\n    \"What's your favorite way to spend a weekend?\",\n    \"If you could travel anywhere right now, where would you go?\",\n    \"What's something you're passionate about?\",\n    \"What's the best piece of advice you've ever received?\",\n    \"What's your favorite type of music or movie?\",\n  ];\n\n  const contextualIcebreakers = commonInterests.length > 0 \n    ? [`I see we both like ${commonInterests[0]}! What got you into it?`]\n    : [];\n\n  return {\n    icebreakers: [...contextualIcebreakers, ...fallbackIcebreakers.slice(0, 3)],\n    confidence: 0.8,\n  };\n};\n\n// Real Groq integration functions (to be implemented with actual API)\nexport const moderateContent = async (request: GroqModerationRequest): Promise<GroqModerationResponse> => {\n  // TODO: Implement real Groq API call\n  // For now, use mock implementation\n  return mockModeration(request);\n};\n\nexport const generateIcebreakers = async (request: GroqIcebreakerRequest): Promise<GroqIcebreakerResponse> => {\n  // TODO: Implement real Groq API call\n  // For now, use mock implementation\n  return mockIcebreakerGeneration(request);\n};\n\nexport const generateSuggestedReplies = async (context: string): Promise<string[]> => {\n  // TODO: Implement real Groq API call for suggested replies\n  return [\n    \"That sounds interesting! Tell me more.\",\n    \"I can relate to that!\",\n    \"That's cool! I've never tried that before.\",\n  ];\n};","size_bytes":2830},"VideoHive/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL || '';\nconst supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || '';\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.warn('Supabase URL or Anon Key is missing. Please check your environment variables.');\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    storage: AsyncStorage,\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: false,\n  },\n});\n\n// Types based on our database schema\nexport interface User {\n  id: string;\n  email?: string;\n  phone?: string;\n  display_name: string;\n  username?: string;\n  date_of_birth?: string;\n  gender?: string;\n  pronouns?: string;\n  bio?: string;\n  interests?: string[];\n  college?: string;\n  location?: string;\n  profile_photo_url?: string;\n  selfie_verified: boolean;\n  is_online: boolean;\n  last_seen: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface UserPreferences {\n  id: string;\n  user_id: string;\n  preferred_genders?: string[];\n  preferred_age_min: number;\n  preferred_age_max: number;\n  preferred_locations?: string[];\n  preferred_interests?: string[];\n  languages?: string[];\n  max_distance_km: number;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface Call {\n  id: string;\n  channel_name: string;\n  caller_id: string;\n  callee_id: string;\n  status: 'waiting' | 'connecting' | 'connected' | 'ended' | 'reported' | 'canceled';\n  started_at: string;\n  ended_at?: string;\n  duration_seconds: number;\n  friend_press_caller: boolean;\n  friend_press_callee: boolean;\n  caller_rating?: number;\n  callee_rating?: number;\n  created_at: string;\n}\n\nexport interface Friendship {\n  id: string;\n  user_a_id: string;\n  user_b_id: string;\n  call_id?: string;\n  created_at: string;\n}\n\nexport interface Conversation {\n  id: string;\n  user_a_id: string;\n  user_b_id: string;\n  last_message_at: string;\n  created_at: string;\n}\n\nexport interface Message {\n  id: string;\n  conversation_id: string;\n  sender_id: string;\n  content: string;\n  message_type: string;\n  attachments?: any[];\n  is_read: boolean;\n  created_at: string;\n}\n\nexport interface IcebreakerPrompt {\n  id: string;\n  prompt_text: string;\n  categories?: string[];\n  language: string;\n  popularity_score: number;\n  is_ai_generated: boolean;\n  created_at: string;\n}\n\nexport interface MiniGameSession {\n  id: string;\n  call_id: string;\n  game_type: 'rock_paper_scissors' | 'trivia' | 'emoji_guess';\n  game_state: any;\n  game_result: any;\n  started_at: string;\n  ended_at?: string;\n  created_at: string;\n}\n\nexport interface TriviaQuestion {\n  id: string;\n  question: string;\n  options: string[];\n  correct_answer: string;\n  category: string;\n  difficulty: string;\n  language: string;\n  created_at: string;\n}","size_bytes":2890},"VideoHive/store/authStore.ts":{"content":"import { create } from 'zustand';\nimport { supabase, User } from '@/lib/supabase';\n\ninterface AuthState {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  signUp: (email: string, password: string) => Promise<void>;\n  signIn: (email: string, password: string) => Promise<void>;\n  signOut: () => Promise<void>;\n  updateProfile: (updates: Partial<User>) => Promise<void>;\n  initialize: () => Promise<void>;\n}\n\nexport const useAuthStore = create<AuthState>((set, get) => ({\n  user: null,\n  isLoading: true,\n  isAuthenticated: false,\n\n  signUp: async (email: string, password: string) => {\n    set({ isLoading: true });\n    \n    try {\n      const { data, error } = await supabase.auth.signUp({\n        email,\n        password,\n        options: {\n          emailRedirectTo: undefined, // Disable email confirmation for MVP\n        },\n      });\n\n      if (error) throw error;\n\n      if (data.user) {\n        // Create user profile\n        const { error: profileError } = await supabase\n          .from('users')\n          .insert({\n            id: data.user.id,\n            email: data.user.email,\n            display_name: data.user.email?.split('@')[0] || 'User',\n            selfie_verified: false,\n          });\n\n        if (profileError) {\n          console.error('Error creating profile:', profileError);\n        }\n      }\n    } catch (error) {\n      console.error('Sign up error:', error);\n      throw error;\n    } finally {\n      set({ isLoading: false });\n    }\n  },\n\n  signIn: async (email: string, password: string) => {\n    set({ isLoading: true });\n    \n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) throw error;\n    } catch (error) {\n      console.error('Sign in error:', error);\n      throw error;\n    } finally {\n      set({ isLoading: false });\n    }\n  },\n\n  signOut: async () => {\n    set({ isLoading: true });\n    \n    try {\n      const { error } = await supabase.auth.signOut();\n      if (error) throw error;\n      \n      set({ user: null, isAuthenticated: false });\n    } catch (error) {\n      console.error('Sign out error:', error);\n      throw error;\n    } finally {\n      set({ isLoading: false });\n    }\n  },\n\n  updateProfile: async (updates: Partial<User>) => {\n    const { user } = get();\n    if (!user) throw new Error('No user found');\n\n    set({ isLoading: true });\n    \n    try {\n      const { error } = await supabase\n        .from('users')\n        .update(updates)\n        .eq('id', user.id);\n\n      if (error) throw error;\n\n      // Update local state\n      set({ user: { ...user, ...updates } });\n    } catch (error) {\n      console.error('Update profile error:', error);\n      throw error;\n    } finally {\n      set({ isLoading: false });\n    }\n  },\n\n  initialize: async () => {\n    try {\n      const { data: { session } } = await supabase.auth.getSession();\n      \n      if (session?.user) {\n        // Fetch user profile\n        const { data: profile, error } = await supabase\n          .from('users')\n          .select('*')\n          .eq('id', session.user.id)\n          .single();\n\n        if (error) {\n          console.error('Error fetching profile:', error);\n        } else if (profile) {\n          set({ \n            user: profile, \n            isAuthenticated: true,\n            isLoading: false \n          });\n          return;\n        }\n      }\n      \n      set({ \n        user: null, \n        isAuthenticated: false,\n        isLoading: false \n      });\n    } catch (error) {\n      console.error('Initialize error:', error);\n      set({ isLoading: false });\n    }\n  },\n}));\n\n// Listen for auth changes\nsupabase.auth.onAuthStateChange(async (event, session) => {\n  const { initialize } = useAuthStore.getState();\n  \n  if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {\n    await initialize();\n  } else if (event === 'SIGNED_OUT') {\n    useAuthStore.setState({ \n      user: null, \n      isAuthenticated: false,\n      isLoading: false \n    });\n  }\n});","size_bytes":4017},"VideoHive/store/callStore.ts":{"content":"import { create } from 'zustand';\nimport { supabase, Call, User } from '@/lib/supabase';\nimport { generateChannelName } from '@/lib/agora';\n\ninterface CallState {\n  currentCall: Call | null;\n  isInCall: boolean;\n  isSearching: boolean;\n  connectedUser: User | null;\n  channelName: string | null;\n  agoraToken: string | null;\n  friendPressed: boolean;\n  otherUserFriendPressed: boolean;\n  currentIcebreaker: string | null;\n  \n  // Actions\n  startSearch: (filters?: any) => Promise<void>;\n  stopSearch: () => void;\n  joinCall: (call: Call) => Promise<void>;\n  endCall: () => Promise<void>;\n  pressFriend: () => Promise<void>;\n  reportUser: (reason: string, description?: string) => Promise<void>;\n  setCurrentIcebreaker: (icebreaker: string) => void;\n  updateCallStatus: (status: Call['status']) => Promise<void>;\n}\n\nexport const useCallStore = create<CallState>((set, get) => ({\n  currentCall: null,\n  isInCall: false,\n  isSearching: false,\n  connectedUser: null,\n  channelName: null,\n  agoraToken: null,\n  friendPressed: false,\n  otherUserFriendPressed: false,\n  currentIcebreaker: null,\n\n  startSearch: async (filters = {}) => {\n    set({ isSearching: true });\n    \n    try {\n      // Add user to matchmaking queue\n      const { data: sessionData } = await supabase.auth.getSession();\n      if (!sessionData.session) throw new Error('Not authenticated');\n\n      const userId = sessionData.session.user.id;\n      \n      // Clear any existing queue entries for this user\n      await supabase\n        .from('matchmaking_queue')\n        .delete()\n        .eq('user_id', userId);\n\n      // Add to queue\n      await supabase\n        .from('matchmaking_queue')\n        .insert({\n          user_id: userId,\n          preferences: filters,\n        });\n\n      // Start polling for matches (in a real app, use realtime subscriptions)\n      const pollForMatch = async () => {\n        try {\n          const { data: calls } = await supabase\n            .from('calls')\n            .select('*, caller:users!calls_caller_id_fkey(*), callee:users!calls_callee_id_fkey(*)')\n            .or(`caller_id.eq.${userId},callee_id.eq.${userId}`)\n            .eq('status', 'waiting')\n            .order('created_at', { ascending: false })\n            .limit(1);\n\n          if (calls && calls.length > 0) {\n            const call = calls[0];\n            set({ isSearching: false });\n            await get().joinCall(call);\n            return;\n          }\n\n          // Continue polling if still searching\n          if (get().isSearching) {\n            setTimeout(pollForMatch, 2000);\n          }\n        } catch (error) {\n          console.error('Error polling for match:', error);\n          if (get().isSearching) {\n            setTimeout(pollForMatch, 2000);\n          }\n        }\n      };\n\n      // Start polling\n      setTimeout(pollForMatch, 1000);\n      \n    } catch (error) {\n      console.error('Error starting search:', error);\n      set({ isSearching: false });\n      throw error;\n    }\n  },\n\n  stopSearch: () => {\n    set({ isSearching: false });\n    \n    // Remove from queue\n    supabase.auth.getSession().then(({ data: sessionData }) => {\n      if (sessionData.session) {\n        supabase\n          .from('matchmaking_queue')\n          .delete()\n          .eq('user_id', sessionData.session.user.id);\n      }\n    });\n  },\n\n  joinCall: async (call: Call) => {\n    try {\n      const { data: sessionData } = await supabase.auth.getSession();\n      if (!sessionData.session) throw new Error('Not authenticated');\n\n      const userId = sessionData.session.user.id;\n      const isCallee = call.callee_id === userId;\n      const otherUserId = isCallee ? call.caller_id : call.callee_id;\n\n      // Get other user's profile\n      const { data: otherUser } = await supabase\n        .from('users')\n        .select('*')\n        .eq('id', otherUserId)\n        .single();\n\n      // TODO: Get Agora token from server\n      const mockToken = `mock_token_${call.channel_name}_${userId}`;\n\n      set({\n        currentCall: call,\n        isInCall: true,\n        connectedUser: otherUser,\n        channelName: call.channel_name,\n        agoraToken: mockToken,\n        friendPressed: isCallee ? call.friend_press_callee : call.friend_press_caller,\n        otherUserFriendPressed: isCallee ? call.friend_press_caller : call.friend_press_callee,\n      });\n\n      // Update call status to connected\n      await get().updateCallStatus('connected');\n      \n    } catch (error) {\n      console.error('Error joining call:', error);\n      throw error;\n    }\n  },\n\n  endCall: async () => {\n    const { currentCall } = get();\n    if (!currentCall) return;\n\n    try {\n      // Update call end time and status\n      await supabase\n        .from('calls')\n        .update({\n          ended_at: new Date().toISOString(),\n          status: 'ended',\n        })\n        .eq('id', currentCall.id);\n\n      set({\n        currentCall: null,\n        isInCall: false,\n        connectedUser: null,\n        channelName: null,\n        agoraToken: null,\n        friendPressed: false,\n        otherUserFriendPressed: false,\n        currentIcebreaker: null,\n      });\n    } catch (error) {\n      console.error('Error ending call:', error);\n      throw error;\n    }\n  },\n\n  pressFriend: async () => {\n    const { currentCall } = get();\n    if (!currentCall || get().friendPressed) return;\n\n    try {\n      const { data: sessionData } = await supabase.auth.getSession();\n      if (!sessionData.session) throw new Error('Not authenticated');\n\n      const userId = sessionData.session.user.id;\n      const isCallee = currentCall.callee_id === userId;\n      \n      // Update friend press status\n      const updateData = isCallee \n        ? { friend_press_callee: true }\n        : { friend_press_caller: true };\n\n      const { data, error } = await supabase\n        .from('calls')\n        .update(updateData)\n        .eq('id', currentCall.id)\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      set({ \n        friendPressed: true,\n        currentCall: data,\n      });\n    } catch (error) {\n      console.error('Error pressing friend:', error);\n      throw error;\n    }\n  },\n\n  reportUser: async (reason: string, description?: string) => {\n    const { currentCall, connectedUser } = get();\n    if (!currentCall || !connectedUser) return;\n\n    try {\n      const { data: sessionData } = await supabase.auth.getSession();\n      if (!sessionData.session) throw new Error('Not authenticated');\n\n      await supabase\n        .from('reports')\n        .insert({\n          reporter_id: sessionData.session.user.id,\n          reported_user_id: connectedUser.id,\n          call_id: currentCall.id,\n          reason: reason as any,\n          description,\n        });\n\n      // End call after reporting\n      await get().endCall();\n    } catch (error) {\n      console.error('Error reporting user:', error);\n      throw error;\n    }\n  },\n\n  setCurrentIcebreaker: (icebreaker: string) => {\n    set({ currentIcebreaker: icebreaker });\n  },\n\n  updateCallStatus: async (status: Call['status']) => {\n    const { currentCall } = get();\n    if (!currentCall) return;\n\n    try {\n      const { error } = await supabase\n        .from('calls')\n        .update({ status })\n        .eq('id', currentCall.id);\n\n      if (error) throw error;\n\n      set({ \n        currentCall: { ...currentCall, status }\n      });\n    } catch (error) {\n      console.error('Error updating call status:', error);\n      throw error;\n    }\n  },\n}));","size_bytes":7452},"VideoHive/store/gameStore.ts":{"content":"import { create } from 'zustand';\nimport { supabase, MiniGameSession, TriviaQuestion } from '@/lib/supabase';\n\ninterface GameState {\n  currentGame: MiniGameSession | null;\n  isGameActive: boolean;\n  gameType: 'rock_paper_scissors' | 'trivia' | 'emoji_guess' | null;\n  gameState: any;\n  triviaQuestions: TriviaQuestion[];\n  \n  // Actions\n  startGame: (gameType: 'rock_paper_scissors' | 'trivia' | 'emoji_guess', callId: string) => Promise<void>;\n  updateGameState: (newState: any) => Promise<void>;\n  endGame: (result: any) => Promise<void>;\n  loadTriviaQuestions: () => Promise<void>;\n}\n\nexport const useGameStore = create<GameState>((set, get) => ({\n  currentGame: null,\n  isGameActive: false,\n  gameType: null,\n  gameState: null,\n  triviaQuestions: [],\n\n  startGame: async (gameType, callId) => {\n    try {\n      const initialState = getInitialGameState(gameType);\n      \n      const { data: gameSession, error } = await supabase\n        .from('mini_game_sessions')\n        .insert({\n          call_id: callId,\n          game_type: gameType,\n          game_state: initialState,\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      set({\n        currentGame: gameSession,\n        isGameActive: true,\n        gameType,\n        gameState: initialState,\n      });\n\n      // Load trivia questions if needed\n      if (gameType === 'trivia') {\n        await get().loadTriviaQuestions();\n      }\n    } catch (error) {\n      console.error('Error starting game:', error);\n      throw error;\n    }\n  },\n\n  updateGameState: async (newState) => {\n    const { currentGame } = get();\n    if (!currentGame) return;\n\n    try {\n      const { error } = await supabase\n        .from('mini_game_sessions')\n        .update({ game_state: newState })\n        .eq('id', currentGame.id);\n\n      if (error) throw error;\n\n      set({ gameState: newState });\n    } catch (error) {\n      console.error('Error updating game state:', error);\n      throw error;\n    }\n  },\n\n  endGame: async (result) => {\n    const { currentGame } = get();\n    if (!currentGame) return;\n\n    try {\n      const { error } = await supabase\n        .from('mini_game_sessions')\n        .update({\n          game_result: result,\n          ended_at: new Date().toISOString(),\n        })\n        .eq('id', currentGame.id);\n\n      if (error) throw error;\n\n      set({\n        currentGame: null,\n        isGameActive: false,\n        gameType: null,\n        gameState: null,\n      });\n    } catch (error) {\n      console.error('Error ending game:', error);\n      throw error;\n    }\n  },\n\n  loadTriviaQuestions: async () => {\n    try {\n      const { data: questions, error } = await supabase\n        .from('trivia_questions')\n        .select('*')\n        .order('created_at', { ascending: false })\n        .limit(50);\n\n      if (error) throw error;\n\n      set({ triviaQuestions: questions || [] });\n    } catch (error) {\n      console.error('Error loading trivia questions:', error);\n      throw error;\n    }\n  },\n}));\n\n// Game state initializers\nconst getInitialGameState = (gameType: string) => {\n  switch (gameType) {\n    case 'rock_paper_scissors':\n      return {\n        round: 1,\n        maxRounds: 3,\n        playerAChoice: null,\n        playerBChoice: null,\n        playerAScore: 0,\n        playerBScore: 0,\n        currentRoundWinner: null,\n        gameWinner: null,\n      };\n    \n    case 'trivia':\n      return {\n        currentQuestion: 0,\n        totalQuestions: 3,\n        playerAScore: 0,\n        playerBScore: 0,\n        playerAAnswers: [],\n        playerBAnswers: [],\n        questionStartTime: null,\n        timePerQuestion: 10000, // 10 seconds\n      };\n    \n    case 'emoji_guess':\n      return {\n        currentWord: '',\n        emojis: [],\n        guesserGuess: '',\n        hostId: null,\n        guesserId: null,\n        timeLimit: 30000, // 30 seconds\n        startTime: null,\n        isCorrect: false,\n      };\n    \n    default:\n      return {};\n  }\n};","size_bytes":3948},"VideoHive/tests/auth.test.ts":{"content":"import { describe, it, expect, beforeEach, jest } from '@jest/globals';\n\n// Mock Supabase\njest.mock('@/lib/supabase', () => ({\n  supabase: {\n    auth: {\n      signUp: jest.fn(),\n      signInWithPassword: jest.fn(),\n      signOut: jest.fn(),\n      getSession: jest.fn(),\n      onAuthStateChange: jest.fn(),\n    },\n    from: jest.fn(() => ({\n      insert: jest.fn(() => ({ select: jest.fn(() => ({ single: jest.fn() })) })),\n      update: jest.fn(() => ({ eq: jest.fn() })),\n      select: jest.fn(() => ({ eq: jest.fn(() => ({ single: jest.fn() })) })),\n    })),\n  },\n}));\n\n// Mock AsyncStorage\njest.mock('@react-native-async-storage/async-storage', () => ({\n  getItem: jest.fn(),\n  setItem: jest.fn(),\n  removeItem: jest.fn(),\n}));\n\nimport { useAuthStore } from '@/store/authStore';\nimport { supabase } from '@/lib/supabase';\n\ndescribe('Authentication Store', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('signUp', () => {\n    it('should create a new user account', async () => {\n      const mockUser = {\n        id: 'test-user-id',\n        email: 'test@example.com',\n      };\n\n      (supabase.auth.signUp as jest.MockedFunction<any>).mockResolvedValue({\n        data: { user: mockUser },\n        error: null,\n      });\n\n      (supabase.from as jest.MockedFunction<any>).mockReturnValue({\n        insert: jest.fn().mockReturnValue({\n          select: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({ data: null, error: null }),\n          }),\n        }),\n      });\n\n      const store = useAuthStore.getState();\n      \n      await expect(store.signUp('test@example.com', 'password123')).resolves.not.toThrow();\n      \n      expect(supabase.auth.signUp).toHaveBeenCalledWith({\n        email: 'test@example.com',\n        password: 'password123',\n        options: {\n          emailRedirectTo: undefined,\n        },\n      });\n    });\n\n    it('should handle signup errors', async () => {\n      (supabase.auth.signUp as jest.MockedFunction<any>).mockResolvedValue({\n        data: { user: null },\n        error: { message: 'Invalid email' },\n      });\n\n      const store = useAuthStore.getState();\n      \n      await expect(store.signUp('invalid-email', 'password123')).rejects.toEqual({\n        message: 'Invalid email',\n      });\n    });\n  });\n\n  describe('signIn', () => {\n    it('should sign in existing user', async () => {\n      const mockUser = {\n        id: 'test-user-id',\n        email: 'test@example.com',\n      };\n\n      (supabase.auth.signInWithPassword as jest.MockedFunction<any>).mockResolvedValue({\n        data: { user: mockUser, session: { access_token: 'token' } },\n        error: null,\n      });\n\n      const store = useAuthStore.getState();\n      \n      await expect(store.signIn('test@example.com', 'password123')).resolves.not.toThrow();\n      \n      expect(supabase.auth.signInWithPassword).toHaveBeenCalledWith({\n        email: 'test@example.com',\n        password: 'password123',\n      });\n    });\n\n    it('should handle signin errors', async () => {\n      (supabase.auth.signInWithPassword as jest.MockedFunction<any>).mockResolvedValue({\n        data: { user: null, session: null },\n        error: { message: 'Invalid credentials' },\n      });\n\n      const store = useAuthStore.getState();\n      \n      await expect(store.signIn('test@example.com', 'wrongpassword')).rejects.toEqual({\n        message: 'Invalid credentials',\n      });\n    });\n  });\n\n  describe('signOut', () => {\n    it('should sign out user', async () => {\n      (supabase.auth.signOut as jest.MockedFunction<any>).mockResolvedValue({\n        error: null,\n      });\n\n      const store = useAuthStore.getState();\n      \n      await expect(store.signOut()).resolves.not.toThrow();\n      \n      expect(supabase.auth.signOut).toHaveBeenCalled();\n      expect(store.user).toBeNull();\n      expect(store.isAuthenticated).toBe(false);\n    });\n  });\n});","size_bytes":3889},"VideoHive/tests/games.test.ts":{"content":"import { describe, it, expect, beforeEach, jest } from '@jest/globals';\n\n// Mock Supabase\njest.mock('@/lib/supabase', () => ({\n  supabase: {\n    from: jest.fn(() => ({\n      insert: jest.fn(() => ({ select: jest.fn(() => ({ single: jest.fn() })) })),\n      update: jest.fn(() => ({ eq: jest.fn() })),\n      select: jest.fn(() => ({\n        order: jest.fn(() => ({\n          limit: jest.fn(() => Promise.resolve({ data: [], error: null })),\n        })),\n      })),\n    })),\n  },\n}));\n\nimport { useGameStore } from '@/store/gameStore';\nimport { supabase } from '@/lib/supabase';\n\ndescribe('Mini-Games System', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('Rock Paper Scissors', () => {\n    it('should initialize game with correct state', async () => {\n      const store = useGameStore.getState();\n      \n      (supabase.from as jest.MockedFunction<any>).mockReturnValue({\n        insert: jest.fn().mockReturnValue({\n          select: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: {\n                id: 'game-id',\n                call_id: 'call-id',\n                game_type: 'rock_paper_scissors',\n                game_state: {\n                  round: 1,\n                  maxRounds: 3,\n                  playerAChoice: null,\n                  playerBChoice: null,\n                  playerAScore: 0,\n                  playerBScore: 0,\n                },\n                started_at: '2023-01-01',\n                created_at: '2023-01-01',\n              },\n              error: null,\n            }),\n          }),\n        }),\n      });\n\n      await store.startGame('rock_paper_scissors', 'call-id');\n\n      expect(store.isGameActive).toBe(true);\n      expect(store.gameType).toBe('rock_paper_scissors');\n      expect(store.gameState).toEqual({\n        round: 1,\n        maxRounds: 3,\n        playerAChoice: null,\n        playerBChoice: null,\n        playerAScore: 0,\n        playerBScore: 0,\n        currentRoundWinner: null,\n        gameWinner: null,\n      });\n    });\n\n    it('should update game state correctly', async () => {\n      const store = useGameStore.getState();\n      \n      // Mock successful update\n      (supabase.from as jest.MockedFunction<any>).mockReturnValue({\n        update: jest.fn().mockReturnValue({\n          eq: jest.fn().mockResolvedValue({ error: null }),\n        }),\n      });\n\n      const newState = {\n        round: 1,\n        playerAChoice: 'rock',\n        playerBChoice: 'scissors',\n        playerAScore: 1,\n        playerBScore: 0,\n      };\n\n      await store.updateGameState(newState);\n\n      expect(store.gameState).toEqual(newState);\n      expect(supabase.from).toHaveBeenCalledWith('mini_game_sessions');\n    });\n  });\n\n  describe('Trivia Game', () => {\n    it('should load trivia questions', async () => {\n      const mockQuestions = [\n        {\n          id: '1',\n          question: 'What is the capital of India?',\n          options: ['Mumbai', 'Delhi', 'Kolkata', 'Chennai'],\n          correct_answer: 'Delhi',\n          category: 'geography',\n          difficulty: 'easy',\n          language: 'english',\n          created_at: '2023-01-01',\n        },\n      ];\n\n      (supabase.from as jest.MockedFunction<any>).mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          order: jest.fn().mockReturnValue({\n            limit: jest.fn().mockResolvedValue({\n              data: mockQuestions,\n              error: null,\n            }),\n          }),\n        }),\n      });\n\n      const store = useGameStore.getState();\n      await store.loadTriviaQuestions();\n\n      expect(store.triviaQuestions).toEqual(mockQuestions);\n      expect(supabase.from).toHaveBeenCalledWith('trivia_questions');\n    });\n\n    it('should initialize trivia game with correct state', async () => {\n      const store = useGameStore.getState();\n      \n      (supabase.from as jest.MockedFunction<any>).mockReturnValue({\n        insert: jest.fn().mockReturnValue({\n          select: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: {\n                id: 'trivia-game-id',\n                call_id: 'call-id',\n                game_type: 'trivia',\n                game_state: {\n                  currentQuestion: 0,\n                  totalQuestions: 3,\n                  playerAScore: 0,\n                  playerBScore: 0,\n                  timePerQuestion: 10000,\n                },\n                started_at: '2023-01-01',\n                created_at: '2023-01-01',\n              },\n              error: null,\n            }),\n          }),\n        }),\n      });\n\n      await store.startGame('trivia', 'call-id');\n\n      expect(store.gameType).toBe('trivia');\n      expect(store.gameState.totalQuestions).toBe(3);\n      expect(store.gameState.timePerQuestion).toBe(10000);\n    });\n  });\n\n  describe('Emoji Guess Game', () => {\n    it('should initialize emoji guess game with correct state', async () => {\n      const store = useGameStore.getState();\n      \n      (supabase.from as jest.MockedFunction<any>).mockReturnValue({\n        insert: jest.fn().mockReturnValue({\n          select: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: {\n                id: 'emoji-game-id',\n                call_id: 'call-id',\n                game_type: 'emoji_guess',\n                game_state: {\n                  currentWord: '',\n                  emojis: [],\n                  timeLimit: 30000,\n                  hostId: null,\n                  guesserId: null,\n                },\n                started_at: '2023-01-01',\n                created_at: '2023-01-01',\n              },\n              error: null,\n            }),\n          }),\n        }),\n      });\n\n      await store.startGame('emoji_guess', 'call-id');\n\n      expect(store.gameType).toBe('emoji_guess');\n      expect(store.gameState.timeLimit).toBe(30000);\n    });\n  });\n\n  describe('endGame', () => {\n    it('should properly end a game session', async () => {\n      const store = useGameStore.getState();\n      \n      // Set up a mock current game\n      store.currentGame = {\n        id: 'game-id',\n        call_id: 'call-id',\n        game_type: 'rock_paper_scissors',\n        game_state: {},\n        game_result: {},\n        started_at: '2023-01-01',\n        created_at: '2023-01-01',\n      };\n\n      (supabase.from as jest.MockedFunction<any>).mockReturnValue({\n        update: jest.fn().mockReturnValue({\n          eq: jest.fn().mockResolvedValue({ error: null }),\n        }),\n      });\n\n      const gameResult = { winner: 'player', score: '2-1' };\n      await store.endGame(gameResult);\n\n      expect(store.currentGame).toBeNull();\n      expect(store.isGameActive).toBe(false);\n      expect(store.gameType).toBeNull();\n      expect(supabase.from).toHaveBeenCalledWith('mini_game_sessions');\n    });\n  });\n});","size_bytes":6866},"VideoHive/tests/matchmaking.test.ts":{"content":"import { describe, it, expect, beforeEach, jest } from '@jest/globals';\n\n// Mock Supabase\njest.mock('@/lib/supabase', () => ({\n  supabase: {\n    from: jest.fn(() => ({\n      insert: jest.fn(() => ({ select: jest.fn(() => ({ single: jest.fn() })) })),\n      delete: jest.fn(() => ({ eq: jest.fn() })),\n      select: jest.fn(() => ({\n        or: jest.fn(() => ({\n          eq: jest.fn(() => ({\n            order: jest.fn(() => ({\n              limit: jest.fn(() => Promise.resolve({ data: [], error: null })),\n            })),\n          })),\n        })),\n      })),\n      update: jest.fn(() => ({ eq: jest.fn(() => ({ select: jest.fn(() => ({ single: jest.fn() })) })) })),\n    })),\n    auth: {\n      getSession: jest.fn(() => Promise.resolve({\n        data: { session: { user: { id: 'test-user-id' } } },\n        error: null,\n      })),\n    },\n  },\n}));\n\nimport { useCallStore } from '@/store/callStore';\nimport { supabase } from '@/lib/supabase';\n\ndescribe('Matchmaking System', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('startSearch', () => {\n    it('should add user to matchmaking queue', async () => {\n      const store = useCallStore.getState();\n      \n      await store.startSearch({ interests: ['music', 'gaming'] });\n      \n      expect(store.isSearching).toBe(true);\n      expect(supabase.from).toHaveBeenCalledWith('matchmaking_queue');\n    });\n\n    it('should clear existing queue entries before adding new one', async () => {\n      const store = useCallStore.getState();\n      \n      await store.startSearch({ interests: ['music'] });\n      \n      // Should delete existing entries first\n      expect(supabase.from).toHaveBeenCalledWith('matchmaking_queue');\n      \n      const mockFrom = supabase.from as jest.MockedFunction<any>;\n      const deleteCall = mockFrom.mock.results[0].value;\n      expect(deleteCall.delete).toHaveBeenCalled();\n    });\n  });\n\n  describe('stopSearch', () => {\n    it('should remove user from queue and stop searching', async () => {\n      const store = useCallStore.getState();\n      \n      // Start search first\n      await store.startSearch({});\n      expect(store.isSearching).toBe(true);\n      \n      // Stop search\n      store.stopSearch();\n      expect(store.isSearching).toBe(false);\n    });\n  });\n\n  describe('joinCall', () => {\n    it('should join a call with proper setup', async () => {\n      const mockCall = {\n        id: 'call-id',\n        channel_name: 'test-channel',\n        caller_id: 'caller-id',\n        callee_id: 'test-user-id',\n        status: 'waiting' as const,\n        friend_press_caller: false,\n        friend_press_callee: false,\n        started_at: '2023-01-01',\n        duration_seconds: 0,\n        created_at: '2023-01-01',\n      };\n\n      // Mock other user profile fetch\n      (supabase.from as jest.MockedFunction<any>).mockReturnValue({\n        select: jest.fn().mockReturnValue({\n          eq: jest.fn().mockReturnValue({\n            single: jest.fn().mockResolvedValue({\n              data: {\n                id: 'caller-id',\n                display_name: 'Test User',\n                email: 'test@example.com',\n                selfie_verified: true,\n                is_online: true,\n                last_seen: '2023-01-01',\n                created_at: '2023-01-01',\n                updated_at: '2023-01-01',\n              },\n              error: null,\n            }),\n          }),\n        }),\n      });\n\n      const store = useCallStore.getState();\n      await store.joinCall(mockCall);\n\n      expect(store.currentCall).toEqual(mockCall);\n      expect(store.isInCall).toBe(true);\n      expect(store.channelName).toBe('test-channel');\n      expect(store.connectedUser).toBeTruthy();\n    });\n  });\n});","size_bytes":3710},"VideoHive/app/(auth)/_layout.tsx":{"content":"import { Stack } from 'expo-router';\n\nexport default function AuthLayout() {\n  return (\n    <Stack screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"welcome\" />\n      <Stack.Screen name=\"signup\" />\n      <Stack.Screen name=\"signin\" />\n      <Stack.Screen name=\"profile-setup\" />\n    </Stack>\n  );\n}","size_bytes":314},"VideoHive/app/(auth)/profile-setup.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n} from 'react-native';\nimport { router } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\nimport { useAuthStore } from '@/store/authStore';\n\nconst INTERESTS = [\n  'Music', 'Gaming', 'Movies', 'Sports', 'Art', 'Travel',\n  'Food', 'Books', 'Technology', 'Photography', 'Dance',\n  'Fitness', 'Fashion', 'Comedy', 'Nature', 'Cooking',\n];\n\nconst PRONOUNS = [\n  'he/him', 'she/her', 'they/them', 'other'\n];\n\nexport default function ProfileSetupScreen() {\n  const [displayName, setDisplayName] = useState('');\n  const [bio, setBio] = useState('');\n  const [selectedInterests, setSelectedInterests] = useState<string[]>([]);\n  const [selectedPronouns, setSelectedPronouns] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const { updateProfile } = useAuthStore();\n\n  const toggleInterest = (interest: string) => {\n    if (selectedInterests.includes(interest)) {\n      setSelectedInterests(prev => prev.filter(i => i !== interest));\n    } else if (selectedInterests.length < 3) {\n      setSelectedInterests(prev => [...prev, interest]);\n    }\n  };\n\n  const handleComplete = async () => {\n    if (!displayName.trim()) {\n      Alert.alert('Error', 'Please enter a display name');\n      return;\n    }\n\n    if (selectedInterests.length === 0) {\n      Alert.alert('Error', 'Please select at least one interest');\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      await updateProfile({\n        display_name: displayName.trim(),\n        bio: bio.trim(),\n        interests: selectedInterests,\n        pronouns: selectedPronouns,\n      });\n      \n      router.replace('/(tabs)');\n    } catch (error: any) {\n      Alert.alert('Error', error.message || 'Failed to update profile');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n      <ScrollView contentContainerStyle={styles.scrollContent}>\n        <View style={styles.header}>\n          <Text style={styles.title}>Complete Your Profile</Text>\n          <Text style={styles.subtitle}>Tell us about yourself</Text>\n        </View>\n\n        <View style={styles.form}>\n          <View style={styles.inputContainer}>\n            <Text style={styles.label}>Display Name *</Text>\n            <TextInput\n              style={styles.input}\n              value={displayName}\n              onChangeText={setDisplayName}\n              placeholder=\"How should we call you?\"\n              placeholderTextColor=\"#999\"\n              maxLength={50}\n            />\n          </View>\n\n          <View style={styles.inputContainer}>\n            <Text style={styles.label}>Bio</Text>\n            <TextInput\n              style={[styles.input, styles.textArea]}\n              value={bio}\n              onChangeText={setBio}\n              placeholder=\"Tell us something interesting about yourself...\"\n              placeholderTextColor=\"#999\"\n              multiline\n              numberOfLines={3}\n              maxLength={150}\n            />\n            <Text style={styles.characterCount}>{bio.length}/150</Text>\n          </View>\n\n          <View style={styles.inputContainer}>\n            <Text style={styles.label}>Pronouns</Text>\n            <View style={styles.pronounsContainer}>\n              {PRONOUNS.map((pronoun) => (\n                <TouchableOpacity\n                  key={pronoun}\n                  style={[\n                    styles.pronounChip,\n                    selectedPronouns === pronoun && styles.selectedPronounChip,\n                  ]}\n                  onPress={() => setSelectedPronouns(pronoun)}\n                >\n                  <Text\n                    style={[\n                      styles.pronounText,\n                      selectedPronouns === pronoun && styles.selectedPronounText,\n                    ]}\n                  >\n                    {pronoun}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n          </View>\n\n          <View style={styles.inputContainer}>\n            <Text style={styles.label}>Interests * (Select up to 3)</Text>\n            <View style={styles.interestsContainer}>\n              {INTERESTS.map((interest) => (\n                <TouchableOpacity\n                  key={interest}\n                  style={[\n                    styles.interestChip,\n                    selectedInterests.includes(interest) && styles.selectedChip,\n                  ]}\n                  onPress={() => toggleInterest(interest)}\n                >\n                  <Text\n                    style={[\n                      styles.interestText,\n                      selectedInterests.includes(interest) && styles.selectedText,\n                    ]}\n                  >\n                    {interest}\n                  </Text>\n                </TouchableOpacity>\n              ))}\n            </View>\n            <Text style={styles.selectedCount}>\n              {selectedInterests.length}/3 selected\n            </Text>\n          </View>\n\n          <TouchableOpacity\n            style={[styles.completeButton, isLoading && styles.disabledButton]}\n            onPress={handleComplete}\n            disabled={isLoading}\n          >\n            <Text style={styles.completeButtonText}>\n              {isLoading ? 'Saving...' : 'Complete Profile'}\n            </Text>\n          </TouchableOpacity>\n        </View>\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n  },\n  scrollContent: {\n    paddingHorizontal: 24,\n    paddingVertical: 40,\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: 40,\n  },\n  title: {\n    fontSize: 28,\n    fontWeight: 'bold',\n    color: '#1a1a1a',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#666',\n    textAlign: 'center',\n  },\n  form: {\n    width: '100%',\n  },\n  inputContainer: {\n    marginBottom: 32,\n  },\n  label: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1a1a1a',\n    marginBottom: 12,\n  },\n  input: {\n    backgroundColor: '#f8f9fa',\n    paddingVertical: 16,\n    paddingHorizontal: 16,\n    borderRadius: 12,\n    fontSize: 16,\n    color: '#1a1a1a',\n    borderWidth: 1,\n    borderColor: '#e9ecef',\n  },\n  textArea: {\n    height: 80,\n    textAlignVertical: 'top',\n  },\n  characterCount: {\n    fontSize: 12,\n    color: '#999',\n    textAlign: 'right',\n    marginTop: 4,\n  },\n  pronounsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  pronounChip: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n    backgroundColor: '#f1f5f9',\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  selectedPronounChip: {\n    backgroundColor: '#8B5CF6',\n    borderColor: '#8B5CF6',\n  },\n  pronounText: {\n    fontSize: 14,\n    color: '#64748b',\n    fontWeight: '500',\n  },\n  selectedPronounText: {\n    color: '#ffffff',\n  },\n  interestsContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  interestChip: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n    backgroundColor: '#f1f5f9',\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  selectedChip: {\n    backgroundColor: '#8B5CF6',\n    borderColor: '#8B5CF6',\n  },\n  interestText: {\n    fontSize: 14,\n    color: '#64748b',\n    fontWeight: '500',\n  },\n  selectedText: {\n    color: '#ffffff',\n  },\n  selectedCount: {\n    fontSize: 12,\n    color: '#666',\n    marginTop: 8,\n    textAlign: 'right',\n  },\n  completeButton: {\n    backgroundColor: '#8B5CF6',\n    paddingVertical: 18,\n    borderRadius: 12,\n    alignItems: 'center',\n    marginTop: 16,\n  },\n  disabledButton: {\n    opacity: 0.6,\n  },\n  completeButtonText: {\n    color: '#ffffff',\n    fontSize: 18,\n    fontWeight: '600',\n  },\n});","size_bytes":7886},"VideoHive/app/(auth)/signin.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n} from 'react-native';\nimport { Link, router } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\nimport { useAuthStore } from '@/store/authStore';\n\nexport default function SignInScreen() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const { signIn } = useAuthStore();\n\n  const handleSignIn = async () => {\n    if (!email || !password) {\n      Alert.alert('Error', 'Please fill in all fields');\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      await signIn(email, password);\n      router.replace('/(tabs)');\n    } catch (error: any) {\n      Alert.alert('Sign In Error', error.message || 'Failed to sign in');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <KeyboardAvoidingView \n      style={styles.container} \n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n    >\n      <StatusBar style=\"dark\" />\n      <ScrollView contentContainerStyle={styles.scrollContent} keyboardShouldPersistTaps=\"handled\">\n        <View style={styles.header}>\n          <Text style={styles.title}>Welcome Back</Text>\n          <Text style={styles.subtitle}>Sign in to continue connecting</Text>\n        </View>\n\n        <View style={styles.form}>\n          <View style={styles.inputContainer}>\n            <Text style={styles.label}>Email</Text>\n            <TextInput\n              style={styles.input}\n              value={email}\n              onChangeText={setEmail}\n              placeholder=\"your.email@example.com\"\n              placeholderTextColor=\"#999\"\n              keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n              autoComplete=\"email\"\n            />\n          </View>\n\n          <View style={styles.inputContainer}>\n            <Text style={styles.label}>Password</Text>\n            <TextInput\n              style={styles.input}\n              value={password}\n              onChangeText={setPassword}\n              placeholder=\"Enter your password\"\n              placeholderTextColor=\"#999\"\n              secureTextEntry\n              autoComplete=\"current-password\"\n            />\n          </View>\n\n          <TouchableOpacity\n            style={[styles.signInButton, isLoading && styles.disabledButton]}\n            onPress={handleSignIn}\n            disabled={isLoading}\n          >\n            <Text style={styles.signInButtonText}>\n              {isLoading ? 'Signing In...' : 'Sign In'}\n            </Text>\n          </TouchableOpacity>\n\n          <View style={styles.footer}>\n            <Text style={styles.footerText}>Don't have an account? </Text>\n            <Link href=\"/(auth)/signup\" asChild>\n              <TouchableOpacity>\n                <Text style={styles.linkText}>Sign Up</Text>\n              </TouchableOpacity>\n            </Link>\n          </View>\n        </View>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n  },\n  scrollContent: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 32,\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: 48,\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: '#1a1a1a',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#666',\n    textAlign: 'center',\n  },\n  form: {\n    width: '100%',\n  },\n  inputContainer: {\n    marginBottom: 24,\n  },\n  label: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#1a1a1a',\n    marginBottom: 8,\n  },\n  input: {\n    backgroundColor: '#f8f9fa',\n    paddingVertical: 16,\n    paddingHorizontal: 16,\n    borderRadius: 12,\n    fontSize: 16,\n    color: '#1a1a1a',\n    borderWidth: 1,\n    borderColor: '#e9ecef',\n  },\n  signInButton: {\n    backgroundColor: '#8B5CF6',\n    paddingVertical: 18,\n    borderRadius: 12,\n    alignItems: 'center',\n    marginTop: 8,\n  },\n  disabledButton: {\n    opacity: 0.6,\n  },\n  signInButtonText: {\n    color: '#ffffff',\n    fontSize: 18,\n    fontWeight: '600',\n  },\n  footer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 32,\n  },\n  footerText: {\n    fontSize: 14,\n    color: '#666',\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#8B5CF6',\n    fontWeight: '600',\n  },\n});","size_bytes":4483},"VideoHive/app/(auth)/signup.tsx":{"content":"import React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TextInput,\n  TouchableOpacity,\n  Alert,\n  KeyboardAvoidingView,\n  Platform,\n  ScrollView,\n} from 'react-native';\nimport { Link, router } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\nimport { useAuthStore } from '@/store/authStore';\n\nexport default function SignUpScreen() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const { signUp } = useAuthStore();\n\n  const handleSignUp = async () => {\n    if (!email || !password) {\n      Alert.alert('Error', 'Please fill in all fields');\n      return;\n    }\n\n    if (password !== confirmPassword) {\n      Alert.alert('Error', 'Passwords do not match');\n      return;\n    }\n\n    if (password.length < 6) {\n      Alert.alert('Error', 'Password must be at least 6 characters');\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      await signUp(email, password);\n      router.replace('/(auth)/profile-setup');\n    } catch (error: any) {\n      Alert.alert('Sign Up Error', error.message || 'Failed to create account');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <KeyboardAvoidingView \n      style={styles.container} \n      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\n    >\n      <StatusBar style=\"dark\" />\n      <ScrollView contentContainerStyle={styles.scrollContent} keyboardShouldPersistTaps=\"handled\">\n        <View style={styles.header}>\n          <Text style={styles.title}>Create Account</Text>\n          <Text style={styles.subtitle}>Join the ChillConnect community</Text>\n        </View>\n\n        <View style={styles.form}>\n          <View style={styles.inputContainer}>\n            <Text style={styles.label}>Email</Text>\n            <TextInput\n              style={styles.input}\n              value={email}\n              onChangeText={setEmail}\n              placeholder=\"your.email@example.com\"\n              placeholderTextColor=\"#999\"\n              keyboardType=\"email-address\"\n              autoCapitalize=\"none\"\n              autoComplete=\"email\"\n            />\n          </View>\n\n          <View style={styles.inputContainer}>\n            <Text style={styles.label}>Password</Text>\n            <TextInput\n              style={styles.input}\n              value={password}\n              onChangeText={setPassword}\n              placeholder=\"Create a strong password\"\n              placeholderTextColor=\"#999\"\n              secureTextEntry\n              autoComplete=\"new-password\"\n            />\n          </View>\n\n          <View style={styles.inputContainer}>\n            <Text style={styles.label}>Confirm Password</Text>\n            <TextInput\n              style={styles.input}\n              value={confirmPassword}\n              onChangeText={setConfirmPassword}\n              placeholder=\"Confirm your password\"\n              placeholderTextColor=\"#999\"\n              secureTextEntry\n              autoComplete=\"new-password\"\n            />\n          </View>\n\n          <TouchableOpacity\n            style={[styles.signUpButton, isLoading && styles.disabledButton]}\n            onPress={handleSignUp}\n            disabled={isLoading}\n          >\n            <Text style={styles.signUpButtonText}>\n              {isLoading ? 'Creating Account...' : 'Sign Up'}\n            </Text>\n          </TouchableOpacity>\n\n          <View style={styles.footer}>\n            <Text style={styles.footerText}>Already have an account? </Text>\n            <Link href=\"/(auth)/signin\" asChild>\n              <TouchableOpacity>\n                <Text style={styles.linkText}>Sign In</Text>\n              </TouchableOpacity>\n            </Link>\n          </View>\n        </View>\n      </ScrollView>\n    </KeyboardAvoidingView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n  },\n  scrollContent: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 32,\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: 48,\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: '#1a1a1a',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#666',\n    textAlign: 'center',\n  },\n  form: {\n    width: '100%',\n  },\n  inputContainer: {\n    marginBottom: 24,\n  },\n  label: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: '#1a1a1a',\n    marginBottom: 8,\n  },\n  input: {\n    backgroundColor: '#f8f9fa',\n    paddingVertical: 16,\n    paddingHorizontal: 16,\n    borderRadius: 12,\n    fontSize: 16,\n    color: '#1a1a1a',\n    borderWidth: 1,\n    borderColor: '#e9ecef',\n  },\n  signUpButton: {\n    backgroundColor: '#8B5CF6',\n    paddingVertical: 18,\n    borderRadius: 12,\n    alignItems: 'center',\n    marginTop: 8,\n  },\n  disabledButton: {\n    opacity: 0.6,\n  },\n  signUpButtonText: {\n    color: '#ffffff',\n    fontSize: 18,\n    fontWeight: '600',\n  },\n  footer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: 32,\n  },\n  footerText: {\n    fontSize: 14,\n    color: '#666',\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#8B5CF6',\n    fontWeight: '600',\n  },\n});","size_bytes":5267},"VideoHive/app/(auth)/welcome.tsx":{"content":"import React from 'react';\nimport { View, Text, StyleSheet, TouchableOpacity, ImageBackground } from 'react-native';\nimport { Link } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\n\nexport default function WelcomeScreen() {\n  return (\n    <ImageBackground\n      source={{ uri: 'https://images.pexels.com/photos/3184611/pexels-photo-3184611.jpeg?auto=compress&cs=tinysrgb&w=1200' }}\n      style={styles.container}\n    >\n      <StatusBar style=\"light\" />\n      <View style={styles.overlay}>\n        <View style={styles.content}>\n          <Text style={styles.title}>ChillConnect</Text>\n          <Text style={styles.subtitle}>Connect • Play • Vibe</Text>\n          <Text style={styles.description}>\n            Meet new people through video calls, play mini-games, and build meaningful connections\n          </Text>\n          \n          <View style={styles.buttonContainer}>\n            <Link href=\"/(auth)/signup\" asChild>\n              <TouchableOpacity style={styles.primaryButton}>\n                <Text style={styles.primaryButtonText}>Get Started</Text>\n              </TouchableOpacity>\n            </Link>\n            \n            <Link href=\"/(auth)/signin\" asChild>\n              <TouchableOpacity style={styles.secondaryButton}>\n                <Text style={styles.secondaryButtonText}>Sign In</Text>\n              </TouchableOpacity>\n            </Link>\n          </View>\n        </View>\n      </View>\n    </ImageBackground>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  overlay: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.6)',\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 32,\n  },\n  content: {\n    alignItems: 'center',\n    width: '100%',\n  },\n  title: {\n    fontSize: 48,\n    fontWeight: 'bold',\n    color: '#ffffff',\n    marginBottom: 8,\n    textAlign: 'center',\n  },\n  subtitle: {\n    fontSize: 20,\n    color: '#e0e0e0',\n    marginBottom: 24,\n    textAlign: 'center',\n  },\n  description: {\n    fontSize: 16,\n    color: '#cccccc',\n    textAlign: 'center',\n    lineHeight: 24,\n    marginBottom: 48,\n  },\n  buttonContainer: {\n    width: '100%',\n    gap: 16,\n  },\n  primaryButton: {\n    backgroundColor: '#8B5CF6',\n    paddingVertical: 16,\n    paddingHorizontal: 32,\n    borderRadius: 25,\n    alignItems: 'center',\n  },\n  primaryButtonText: {\n    color: '#ffffff',\n    fontSize: 18,\n    fontWeight: '600',\n  },\n  secondaryButton: {\n    backgroundColor: 'transparent',\n    paddingVertical: 16,\n    paddingHorizontal: 32,\n    borderRadius: 25,\n    alignItems: 'center',\n    borderWidth: 2,\n    borderColor: '#ffffff',\n  },\n  secondaryButtonText: {\n    color: '#ffffff',\n    fontSize: 18,\n    fontWeight: '600',\n  },\n});","size_bytes":2724},"VideoHive/app/(tabs)/_layout.tsx":{"content":"import { Tabs } from 'expo-router';\nimport { Chrome as Home, Users, MessageCircle, User } from 'lucide-react-native';\n\nexport default function TabLayout() {\n  return (\n    <Tabs\n      screenOptions={{\n        headerShown: false,\n        tabBarActiveTintColor: '#8B5CF6',\n        tabBarInactiveTintColor: '#64748b',\n        tabBarStyle: {\n          backgroundColor: '#ffffff',\n          borderTopWidth: 1,\n          borderTopColor: '#e2e8f0',\n          paddingBottom: 8,\n          paddingTop: 8,\n          height: 80,\n        },\n      }}\n    >\n      <Tabs.Screen\n        name=\"index\"\n        options={{\n          title: 'Home',\n          tabBarIcon: ({ size, color }) => (\n            <Home size={size} color={color} />\n          ),\n        }}\n      />\n      <Tabs.Screen\n        name=\"friends\"\n        options={{\n          title: 'Friends',\n          tabBarIcon: ({ size, color }) => (\n            <Users size={size} color={color} />\n          ),\n        }}\n      />\n      <Tabs.Screen\n        name=\"chats\"\n        options={{\n          title: 'Chats',\n          tabBarIcon: ({ size, color }) => (\n            <MessageCircle size={size} color={color} />\n          ),\n        }}\n      />\n      <Tabs.Screen\n        name=\"profile\"\n        options={{\n          title: 'Profile',\n          tabBarIcon: ({ size, color }) => (\n            <User size={size} color={color} />\n          ),\n        }}\n      />\n    </Tabs>\n  );\n}","size_bytes":1418},"VideoHive/app/(tabs)/chats.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  FlatList,\n  TouchableOpacity,\n  RefreshControl,\n} from 'react-native';\nimport { router } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\nimport { MessageCircle, Users } from 'lucide-react-native';\nimport { useAuthStore } from '@/store/authStore';\nimport { supabase, Conversation, User, Message } from '@/lib/supabase';\n\ninterface ConversationItem extends Conversation {\n  other_user: User;\n  last_message: Message | null;\n  unread_count: number;\n}\n\nexport default function ChatsScreen() {\n  const [conversations, setConversations] = useState<ConversationItem[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  \n  const { user } = useAuthStore();\n\n  useEffect(() => {\n    if (user) {\n      loadConversations();\n      \n      // Set up real-time subscription for new messages\n      const channel = supabase\n        .channel('conversations')\n        .on('postgres_changes', {\n          event: '*',\n          schema: 'public',\n          table: 'messages',\n        }, () => {\n          loadConversations();\n        })\n        .subscribe();\n\n      return () => {\n        supabase.removeChannel(channel);\n      };\n    }\n  }, [user]);\n\n  const loadConversations = async (refresh = false) => {\n    if (!user) return;\n    \n    if (!refresh) setIsLoading(true);\n    if (refresh) setIsRefreshing(true);\n    \n    try {\n      const { data: conversationsData, error } = await supabase\n        .from('conversations')\n        .select(`\n          *,\n          user_a:users!conversations_user_a_id_fkey(*),\n          user_b:users!conversations_user_b_id_fkey(*)\n        `)\n        .or(`user_a_id.eq.${user.id},user_b_id.eq.${user.id}`)\n        .order('last_message_at', { ascending: false });\n\n      if (error) throw error;\n\n      // Get last message and unread count for each conversation\n      const conversationItems: ConversationItem[] = await Promise.all(\n        (conversationsData || []).map(async (conv) => {\n          // Get other user\n          const otherUser = conv.user_a_id === user.id ? conv.user_b : conv.user_a;\n          \n          // Get last message\n          const { data: lastMessage } = await supabase\n            .from('messages')\n            .select('*')\n            .eq('conversation_id', conv.id)\n            .order('created_at', { ascending: false })\n            .limit(1)\n            .single();\n\n          // Get unread count\n          const { count: unreadCount } = await supabase\n            .from('messages')\n            .select('*', { count: 'exact', head: true })\n            .eq('conversation_id', conv.id)\n            .eq('is_read', false)\n            .neq('sender_id', user.id);\n\n          return {\n            ...conv,\n            other_user: otherUser,\n            last_message: lastMessage,\n            unread_count: unreadCount || 0,\n          };\n        })\n      );\n\n      setConversations(conversationItems);\n    } catch (error) {\n      console.error('Error loading conversations:', error);\n    } finally {\n      setIsLoading(false);\n      setIsRefreshing(false);\n    }\n  };\n\n  const formatMessagePreview = (message: Message | null): string => {\n    if (!message) return 'No messages yet';\n    \n    if (message.message_type === 'text') {\n      return message.content.length > 50 \n        ? `${message.content.substring(0, 50)}...`\n        : message.content;\n    }\n    \n    return '📷 Photo';\n  };\n\n  const formatLastMessageTime = (date: string): string => {\n    const now = new Date();\n    const messageDate = new Date(date);\n    const diffMs = now.getTime() - messageDate.getTime();\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffHours = Math.floor(diffMs / 3600000);\n    const diffDays = Math.floor(diffMs / 86400000);\n\n    if (diffMins < 1) return 'now';\n    if (diffMins < 60) return `${diffMins}m`;\n    if (diffHours < 24) return `${diffHours}h`;\n    if (diffDays < 7) return `${diffDays}d`;\n    \n    return messageDate.toLocaleDateString();\n  };\n\n  const renderConversationItem = ({ item }: { item: ConversationItem }) => (\n    <TouchableOpacity\n      style={styles.conversationItem}\n      onPress={() => router.push(`/chat/${item.id}`)}\n    >\n      <View style={styles.avatar}>\n        <Text style={styles.avatarText}>\n          {item.other_user.display_name.charAt(0).toUpperCase()}\n        </Text>\n      </View>\n      \n      <View style={styles.conversationInfo}>\n        <View style={styles.conversationHeader}>\n          <Text style={styles.userName}>{item.other_user.display_name}</Text>\n          <Text style={styles.timestamp}>\n            {item.last_message \n              ? formatLastMessageTime(item.last_message.created_at)\n              : formatLastMessageTime(item.created_at)\n            }\n          </Text>\n        </View>\n        \n        <View style={styles.messagePreview}>\n          <Text style={[\n            styles.lastMessage,\n            item.unread_count > 0 && styles.unreadMessage\n          ]}>\n            {formatMessagePreview(item.last_message)}\n          </Text>\n          {item.unread_count > 0 && (\n            <View style={styles.unreadBadge}>\n              <Text style={styles.unreadCount}>\n                {item.unread_count > 99 ? '99+' : item.unread_count}\n              </Text>\n            </View>\n          )}\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n\n  const renderEmptyState = () => (\n    <View style={styles.emptyState}>\n      <MessageCircle size={64} color=\"#cccccc\" />\n      <Text style={styles.emptyStateTitle}>No conversations yet</Text>\n      <Text style={styles.emptyStateText}>\n        Make friends through video calls to start chatting!\n      </Text>\n      <TouchableOpacity\n        style={styles.findFriendsButton}\n        onPress={() => router.push('/(tabs)')}\n      >\n        <Users size={20} color=\"#ffffff\" />\n        <Text style={styles.findFriendsButtonText}>Start Video Call</Text>\n      </TouchableOpacity>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n      \n      <View style={styles.header}>\n        <Text style={styles.title}>Chats</Text>\n        <Text style={styles.subtitle}>\n          {conversations.length} conversation{conversations.length !== 1 ? 's' : ''}\n        </Text>\n      </View>\n\n      <FlatList\n        data={conversations}\n        renderItem={renderConversationItem}\n        keyExtractor={(item) => item.id}\n        contentContainerStyle={[\n          styles.listContent,\n          conversations.length === 0 && styles.emptyListContent\n        ]}\n        ListEmptyComponent={renderEmptyState}\n        refreshControl={\n          <RefreshControl\n            refreshing={isRefreshing}\n            onRefresh={() => loadConversations(true)}\n            tintColor=\"#8B5CF6\"\n          />\n        }\n        showsVerticalScrollIndicator={false}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n  },\n  header: {\n    paddingHorizontal: 24,\n    paddingTop: 60,\n    paddingBottom: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: '#f1f5f9',\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: '#1a1a1a',\n    marginBottom: 4,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#64748b',\n  },\n  listContent: {\n    paddingVertical: 8,\n  },\n  emptyListContent: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 24,\n  },\n  conversationItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 24,\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#f8f9fa',\n  },\n  avatar: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    backgroundColor: '#8B5CF6',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 16,\n  },\n  avatarText: {\n    color: '#ffffff',\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  conversationInfo: {\n    flex: 1,\n  },\n  conversationHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 4,\n  },\n  userName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1a1a1a',\n  },\n  timestamp: {\n    fontSize: 12,\n    color: '#94a3b8',\n  },\n  messagePreview: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n  lastMessage: {\n    fontSize: 14,\n    color: '#64748b',\n    flex: 1,\n  },\n  unreadMessage: {\n    fontWeight: '600',\n    color: '#1a1a1a',\n  },\n  unreadBadge: {\n    backgroundColor: '#8B5CF6',\n    borderRadius: 10,\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    minWidth: 20,\n    alignItems: 'center',\n  },\n  unreadCount: {\n    color: '#ffffff',\n    fontSize: 12,\n    fontWeight: '600',\n  },\n  emptyState: {\n    alignItems: 'center',\n    paddingVertical: 60,\n  },\n  emptyStateTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1a1a1a',\n    marginTop: 24,\n    marginBottom: 16,\n  },\n  emptyStateText: {\n    fontSize: 16,\n    color: '#64748b',\n    textAlign: 'center',\n    lineHeight: 24,\n    paddingHorizontal: 32,\n    marginBottom: 32,\n  },\n  findFriendsButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#8B5CF6',\n    paddingVertical: 16,\n    paddingHorizontal: 24,\n    borderRadius: 12,\n    gap: 8,\n  },\n  findFriendsButtonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});","size_bytes":9438},"VideoHive/app/(tabs)/friends.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  FlatList,\n  TouchableOpacity,\n  Alert,\n  RefreshControl,\n} from 'react-native';\nimport { router } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\nimport { Users, MessageCircle, UserPlus } from 'lucide-react-native';\nimport { useAuthStore } from '@/store/authStore';\nimport { supabase, Friendship, User } from '@/lib/supabase';\n\ninterface FriendItem extends User {\n  friendship_created_at: string;\n}\n\nexport default function FriendsScreen() {\n  const [friends, setFriends] = useState<FriendItem[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  \n  const { user } = useAuthStore();\n\n  useEffect(() => {\n    loadFriends();\n  }, [user]);\n\n  const loadFriends = async (refresh = false) => {\n    if (!user) return;\n    \n    if (!refresh) setIsLoading(true);\n    if (refresh) setIsRefreshing(true);\n    \n    try {\n      const { data: friendships, error } = await supabase\n        .from('friendships')\n        .select(`\n          *,\n          user_a:users!friendships_user_a_id_fkey(*),\n          user_b:users!friendships_user_b_id_fkey(*)\n        `)\n        .or(`user_a_id.eq.${user.id},user_b_id.eq.${user.id}`)\n        .order('created_at', { ascending: false });\n\n      if (error) throw error;\n\n      // Extract friend profiles (the user who is NOT the current user)\n      const friendProfiles: FriendItem[] = friendships?.map(friendship => {\n        const friend = friendship.user_a_id === user.id \n          ? friendship.user_b \n          : friendship.user_a;\n        \n        return {\n          ...friend,\n          friendship_created_at: friendship.created_at,\n        };\n      }) || [];\n\n      setFriends(friendProfiles);\n    } catch (error) {\n      console.error('Error loading friends:', error);\n      Alert.alert('Error', 'Failed to load friends');\n    } finally {\n      setIsLoading(false);\n      setIsRefreshing(false);\n    }\n  };\n\n  const handleChatWithFriend = async (friend: FriendItem) => {\n    if (!user) return;\n    \n    try {\n      // Check if conversation exists\n      const { data: existingConversation } = await supabase\n        .from('conversations')\n        .select('*')\n        .or(`and(user_a_id.eq.${user.id},user_b_id.eq.${friend.id}),and(user_a_id.eq.${friend.id},user_b_id.eq.${user.id})`)\n        .single();\n\n      if (existingConversation) {\n        router.push(`/chat/${existingConversation.id}`);\n      } else {\n        // Create new conversation\n        const { data: newConversation, error } = await supabase\n          .from('conversations')\n          .insert({\n            user_a_id: Math.min(user.id, friend.id) === user.id ? user.id : friend.id,\n            user_b_id: Math.max(user.id, friend.id) === user.id ? user.id : friend.id,\n          })\n          .select()\n          .single();\n\n        if (error) throw error;\n        \n        router.push(`/chat/${newConversation.id}`);\n      }\n    } catch (error) {\n      console.error('Error starting chat:', error);\n      Alert.alert('Error', 'Failed to start chat');\n    }\n  };\n\n  const renderFriendItem = ({ item: friend }: { item: FriendItem }) => (\n    <View style={styles.friendItem}>\n      <View style={styles.friendAvatar}>\n        <Text style={styles.friendAvatarText}>\n          {friend.display_name.charAt(0).toUpperCase()}\n        </Text>\n      </View>\n      \n      <View style={styles.friendInfo}>\n        <Text style={styles.friendName}>{friend.display_name}</Text>\n        {friend.bio && <Text style={styles.friendBio}>{friend.bio}</Text>}\n        <Text style={styles.friendDate}>\n          Friends since {new Date(friend.friendship_created_at).toLocaleDateString()}\n        </Text>\n      </View>\n      \n      <TouchableOpacity\n        style={styles.chatButton}\n        onPress={() => handleChatWithFriend(friend)}\n      >\n        <MessageCircle size={20} color=\"#8B5CF6\" />\n      </TouchableOpacity>\n    </View>\n  );\n\n  const renderEmptyState = () => (\n    <View style={styles.emptyState}>\n      <UserPlus size={64} color=\"#cccccc\" />\n      <Text style={styles.emptyStateTitle}>No friends yet</Text>\n      <Text style={styles.emptyStateText}>\n        Start video calls and press the heart button when you meet someone you'd like to be friends with!\n      </Text>\n      <TouchableOpacity\n        style={styles.startCallButton}\n        onPress={() => router.push('/(tabs)')}\n      >\n        <Text style={styles.startCallButtonText}>Start Video Call</Text>\n      </TouchableOpacity>\n    </View>\n  );\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n      \n      <View style={styles.header}>\n        <Text style={styles.title}>Friends</Text>\n        <Text style={styles.subtitle}>\n          {friends.length} friend{friends.length !== 1 ? 's' : ''}\n        </Text>\n      </View>\n\n      <FlatList\n        data={friends}\n        renderItem={renderFriendItem}\n        keyExtractor={(item) => item.id}\n        contentContainerStyle={[\n          styles.listContent,\n          friends.length === 0 && styles.emptyListContent\n        ]}\n        ListEmptyComponent={renderEmptyState}\n        refreshControl={\n          <RefreshControl\n            refreshing={isRefreshing}\n            onRefresh={() => loadFriends(true)}\n            tintColor=\"#8B5CF6\"\n          />\n        }\n        showsVerticalScrollIndicator={false}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n  },\n  header: {\n    paddingHorizontal: 24,\n    paddingTop: 60,\n    paddingBottom: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: '#f1f5f9',\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: '#1a1a1a',\n    marginBottom: 4,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#64748b',\n  },\n  listContent: {\n    paddingHorizontal: 24,\n    paddingVertical: 16,\n  },\n  emptyListContent: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  friendItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: '#f8f9fa',\n    borderRadius: 16,\n    padding: 16,\n    marginBottom: 12,\n  },\n  friendAvatar: {\n    width: 50,\n    height: 50,\n    borderRadius: 25,\n    backgroundColor: '#8B5CF6',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginRight: 16,\n  },\n  friendAvatarText: {\n    color: '#ffffff',\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  friendInfo: {\n    flex: 1,\n  },\n  friendName: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1a1a1a',\n    marginBottom: 4,\n  },\n  friendBio: {\n    fontSize: 14,\n    color: '#64748b',\n    marginBottom: 4,\n  },\n  friendDate: {\n    fontSize: 12,\n    color: '#94a3b8',\n  },\n  chatButton: {\n    width: 44,\n    height: 44,\n    borderRadius: 22,\n    backgroundColor: '#ffffff',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  emptyState: {\n    alignItems: 'center',\n    paddingVertical: 60,\n  },\n  emptyStateTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1a1a1a',\n    marginTop: 24,\n    marginBottom: 16,\n  },\n  emptyStateText: {\n    fontSize: 16,\n    color: '#64748b',\n    textAlign: 'center',\n    lineHeight: 24,\n    paddingHorizontal: 32,\n    marginBottom: 32,\n  },\n  startCallButton: {\n    backgroundColor: '#8B5CF6',\n    paddingVertical: 16,\n    paddingHorizontal: 32,\n    borderRadius: 12,\n  },\n  startCallButtonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n});","size_bytes":7518},"VideoHive/app/(tabs)/index.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n  Modal,\n} from 'react-native';\nimport { router } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\nimport { Video, Filter, Zap, Users } from 'lucide-react-native';\nimport { useAuthStore } from '@/store/authStore';\nimport { useCallStore } from '@/store/callStore';\nimport { supabase } from '@/lib/supabase';\n\nconst INTERESTS = [\n  'Music', 'Gaming', 'Movies', 'Sports', 'Art', 'Travel',\n  'Food', 'Books', 'Technology', 'Photography',\n];\n\nconst GENDERS = ['Male', 'Female', 'Non-binary', 'All'];\n\nexport default function HomeScreen() {\n  const [showFilters, setShowFilters] = useState(false);\n  const [selectedInterests, setSelectedInterests] = useState<string[]>([]);\n  const [selectedGenders, setSelectedGenders] = useState<string[]>(['All']);\n  const [ageRange, setAgeRange] = useState([18, 30]);\n  \n  const { user } = useAuthStore();\n  const { startSearch, isSearching, stopSearch } = useCallStore();\n\n  useEffect(() => {\n    // Initialize matchmaking logic - create a simple matching system\n    initializeMatchmaking();\n  }, []);\n\n  const initializeMatchmaking = async () => {\n    // Set up real-time subscription for matchmaking\n    const channel = supabase.channel('matchmaking')\n      .on('postgres_changes', {\n        event: 'INSERT',\n        schema: 'public',\n        table: 'matchmaking_queue'\n      }, handleNewQueueEntry)\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  };\n\n  const handleNewQueueEntry = async (payload: any) => {\n    if (!user) return;\n    \n    const newEntry = payload.new;\n    if (newEntry.user_id === user.id) return; // Skip own entries\n\n    // Simple matching logic - in production, this would be more sophisticated\n    const { data: existingEntries } = await supabase\n      .from('matchmaking_queue')\n      .select('*')\n      .neq('user_id', newEntry.user_id);\n\n    if (existingEntries && existingEntries.length > 0) {\n      // Found a match! Create a call\n      const otherEntry = existingEntries[0];\n      await createCall(user.id, otherEntry.user_id);\n      \n      // Clean up queue entries\n      await supabase\n        .from('matchmaking_queue')\n        .delete()\n        .in('user_id', [user.id, otherEntry.user_id]);\n    }\n  };\n\n  const createCall = async (callerId: string, calleeId: string) => {\n    try {\n      const channelName = `call_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      \n      const { data: call, error } = await supabase\n        .from('calls')\n        .insert({\n          caller_id: callerId,\n          callee_id: calleeId,\n          channel_name: channelName,\n          status: 'waiting',\n        })\n        .select()\n        .single();\n\n      if (error) throw error;\n\n      // Notify both users (in a real app, use push notifications)\n      console.log('Call created:', call);\n    } catch (error) {\n      console.error('Error creating call:', error);\n    }\n  };\n\n  const handleStartCall = async () => {\n    if (!user) {\n      Alert.alert('Error', 'Please sign in first');\n      return;\n    }\n\n    try {\n      const filters = {\n        interests: selectedInterests,\n        genders: selectedGenders,\n        ageRange,\n      };\n\n      await startSearch(filters);\n      router.push('/calling/search');\n    } catch (error: any) {\n      Alert.alert('Error', error.message || 'Failed to start searching');\n    }\n  };\n\n  const toggleInterest = (interest: string) => {\n    if (selectedInterests.includes(interest)) {\n      setSelectedInterests(prev => prev.filter(i => i !== interest));\n    } else {\n      setSelectedInterests(prev => [...prev, interest]);\n    }\n  };\n\n  const toggleGender = (gender: string) => {\n    if (gender === 'All') {\n      setSelectedGenders(['All']);\n    } else {\n      const newGenders = selectedGenders.filter(g => g !== 'All');\n      if (selectedGenders.includes(gender)) {\n        const filtered = newGenders.filter(g => g !== gender);\n        setSelectedGenders(filtered.length === 0 ? ['All'] : filtered);\n      } else {\n        setSelectedGenders([...newGenders, gender]);\n      }\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n      \n      <ScrollView contentContainerStyle={styles.content}>\n        {/* Header */}\n        <View style={styles.header}>\n          <Text style={styles.greeting}>\n            Hey {user?.display_name || 'there'}! 👋\n          </Text>\n          <Text style={styles.subtitle}>Ready to meet someone new?</Text>\n        </View>\n\n        {/* Main Call Button */}\n        <TouchableOpacity\n          style={styles.callButton}\n          onPress={handleStartCall}\n          disabled={isSearching}\n        >\n          <View style={styles.callButtonContent}>\n            <Video size={32} color=\"#ffffff\" />\n            <Text style={styles.callButtonText}>\n              {isSearching ? 'Searching...' : 'Start Video Call'}\n            </Text>\n          </View>\n        </TouchableOpacity>\n\n        {/* Quick Actions */}\n        <View style={styles.quickActions}>\n          <TouchableOpacity\n            style={styles.filterButton}\n            onPress={() => setShowFilters(true)}\n          >\n            <Filter size={20} color=\"#8B5CF6\" />\n            <Text style={styles.filterButtonText}>Filters</Text>\n          </TouchableOpacity>\n          \n          <TouchableOpacity\n            style={styles.actionButton}\n            onPress={() => router.push('/(tabs)/friends')}\n          >\n            <Users size={20} color=\"#8B5CF6\" />\n            <Text style={styles.actionButtonText}>Friends</Text>\n          </TouchableOpacity>\n        </View>\n\n        {/* Stats */}\n        <View style={styles.statsContainer}>\n          <View style={styles.statItem}>\n            <Zap size={24} color=\"#10b981\" />\n            <Text style={styles.statNumber}>1.2k</Text>\n            <Text style={styles.statLabel}>Online Now</Text>\n          </View>\n          <View style={styles.statItem}>\n            <Users size={24} color=\"#3b82f6\" />\n            <Text style={styles.statNumber}>50k+</Text>\n            <Text style={styles.statLabel}>Active Users</Text>\n          </View>\n        </View>\n\n        {/* Community Rooms (Placeholder) */}\n        <View style={styles.section}>\n          <Text style={styles.sectionTitle}>Popular Interests</Text>\n          <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n            <View style={styles.interestTags}>\n              {INTERESTS.slice(0, 5).map((interest) => (\n                <View key={interest} style={styles.interestTag}>\n                  <Text style={styles.interestTagText}>{interest}</Text>\n                </View>\n              ))}\n            </View>\n          </ScrollView>\n        </View>\n      </ScrollView>\n\n      {/* Filters Modal */}\n      <Modal\n        visible={showFilters}\n        animationType=\"slide\"\n        presentationStyle=\"pageSheet\"\n      >\n        <View style={styles.modalContainer}>\n          <View style={styles.modalHeader}>\n            <TouchableOpacity onPress={() => setShowFilters(false)}>\n              <Text style={styles.modalCancel}>Cancel</Text>\n            </TouchableOpacity>\n            <Text style={styles.modalTitle}>Filters</Text>\n            <TouchableOpacity onPress={() => setShowFilters(false)}>\n              <Text style={styles.modalDone}>Done</Text>\n            </TouchableOpacity>\n          </View>\n\n          <ScrollView style={styles.modalContent}>\n            <View style={styles.filterSection}>\n              <Text style={styles.filterTitle}>Interests</Text>\n              <View style={styles.filterOptions}>\n                {INTERESTS.map((interest) => (\n                  <TouchableOpacity\n                    key={interest}\n                    style={[\n                      styles.filterChip,\n                      selectedInterests.includes(interest) && styles.selectedChip,\n                    ]}\n                    onPress={() => toggleInterest(interest)}\n                  >\n                    <Text\n                      style={[\n                        styles.filterChipText,\n                        selectedInterests.includes(interest) && styles.selectedChipText,\n                      ]}\n                    >\n                      {interest}\n                    </Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n            </View>\n\n            <View style={styles.filterSection}>\n              <Text style={styles.filterTitle}>Gender Preference</Text>\n              <View style={styles.filterOptions}>\n                {GENDERS.map((gender) => (\n                  <TouchableOpacity\n                    key={gender}\n                    style={[\n                      styles.filterChip,\n                      selectedGenders.includes(gender) && styles.selectedChip,\n                    ]}\n                    onPress={() => toggleGender(gender)}\n                  >\n                    <Text\n                      style={[\n                        styles.filterChipText,\n                        selectedGenders.includes(gender) && styles.selectedChipText,\n                      ]}\n                    >\n                      {gender}\n                    </Text>\n                  </TouchableOpacity>\n                ))}\n              </View>\n            </View>\n\n            <View style={styles.filterSection}>\n              <Text style={styles.filterTitle}>Age Range</Text>\n              <Text style={styles.ageRangeText}>\n                {ageRange[0]} - {ageRange[1]} years\n              </Text>\n              {/* TODO: Add slider component for age range */}\n            </View>\n          </ScrollView>\n        </View>\n      </Modal>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n  },\n  content: {\n    paddingHorizontal: 24,\n    paddingVertical: 20,\n  },\n  header: {\n    alignItems: 'center',\n    marginBottom: 40,\n    marginTop: 40,\n  },\n  greeting: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1a1a1a',\n    marginBottom: 8,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#666',\n  },\n  callButton: {\n    backgroundColor: '#8B5CF6',\n    borderRadius: 25,\n    paddingVertical: 24,\n    paddingHorizontal: 32,\n    marginBottom: 32,\n    shadowColor: '#8B5CF6',\n    shadowOffset: { width: 0, height: 4 },\n    shadowOpacity: 0.3,\n    shadowRadius: 12,\n    elevation: 8,\n  },\n  callButtonContent: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 12,\n  },\n  callButtonText: {\n    color: '#ffffff',\n    fontSize: 20,\n    fontWeight: '600',\n  },\n  quickActions: {\n    flexDirection: 'row',\n    gap: 16,\n    marginBottom: 32,\n  },\n  filterButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 8,\n    backgroundColor: '#f8f9fa',\n    paddingVertical: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#e9ecef',\n  },\n  filterButtonText: {\n    color: '#8B5CF6',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  actionButton: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 8,\n    backgroundColor: '#f8f9fa',\n    paddingVertical: 16,\n    borderRadius: 12,\n    borderWidth: 1,\n    borderColor: '#e9ecef',\n  },\n  actionButtonText: {\n    color: '#8B5CF6',\n    fontSize: 16,\n    fontWeight: '600',\n  },\n  statsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    backgroundColor: '#f8f9fa',\n    borderRadius: 16,\n    paddingVertical: 24,\n    marginBottom: 32,\n  },\n  statItem: {\n    alignItems: 'center',\n    gap: 8,\n  },\n  statNumber: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1a1a1a',\n  },\n  statLabel: {\n    fontSize: 14,\n    color: '#666',\n  },\n  section: {\n    marginBottom: 24,\n  },\n  sectionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1a1a1a',\n    marginBottom: 16,\n  },\n  interestTags: {\n    flexDirection: 'row',\n    gap: 12,\n    paddingHorizontal: 4,\n  },\n  interestTag: {\n    backgroundColor: '#8B5CF6',\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n  },\n  interestTagText: {\n    color: '#ffffff',\n    fontSize: 14,\n    fontWeight: '500',\n  },\n  modalContainer: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n  },\n  modalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 24,\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e9ecef',\n  },\n  modalCancel: {\n    fontSize: 16,\n    color: '#666',\n  },\n  modalTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1a1a1a',\n  },\n  modalDone: {\n    fontSize: 16,\n    color: '#8B5CF6',\n    fontWeight: '600',\n  },\n  modalContent: {\n    flex: 1,\n    paddingHorizontal: 24,\n  },\n  filterSection: {\n    marginVertical: 24,\n  },\n  filterTitle: {\n    fontSize: 16,\n    fontWeight: '600',\n    color: '#1a1a1a',\n    marginBottom: 16,\n  },\n  filterOptions: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    gap: 8,\n  },\n  filterChip: {\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n    borderRadius: 20,\n    backgroundColor: '#f1f5f9',\n    borderWidth: 1,\n    borderColor: '#e2e8f0',\n  },\n  selectedChip: {\n    backgroundColor: '#8B5CF6',\n    borderColor: '#8B5CF6',\n  },\n  filterChipText: {\n    fontSize: 14,\n    color: '#64748b',\n    fontWeight: '500',\n  },\n  selectedChipText: {\n    color: '#ffffff',\n  },\n  ageRangeText: {\n    fontSize: 16,\n    color: '#1a1a1a',\n    textAlign: 'center',\n    paddingVertical: 16,\n    backgroundColor: '#f8f9fa',\n    borderRadius: 12,\n  },\n});","size_bytes":13684},"VideoHive/app/(tabs)/profile.tsx":{"content":"import React from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  ScrollView,\n  Alert,\n} from 'react-native';\nimport { router } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\nimport { Settings, CreditCard as Edit, Shield, CircleHelp as HelpCircle, LogOut, User, Heart, MessageSquare } from 'lucide-react-native';\nimport { useAuthStore } from '@/store/authStore';\n\nexport default function ProfileScreen() {\n  const { user, signOut } = useAuthStore();\n\n  const handleSignOut = () => {\n    Alert.alert(\n      'Sign Out',\n      'Are you sure you want to sign out?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { \n          text: 'Sign Out', \n          style: 'destructive',\n          onPress: async () => {\n            try {\n              await signOut();\n              router.replace('/(auth)/welcome');\n            } catch (error: any) {\n              Alert.alert('Error', error.message || 'Failed to sign out');\n            }\n          }\n        },\n      ]\n    );\n  };\n\n  const handleEditProfile = () => {\n    // TODO: Navigate to edit profile screen\n    Alert.alert('Coming Soon', 'Profile editing will be available soon!');\n  };\n\n  const stats = [\n    { label: 'Video Calls', value: '12', icon: MessageSquare },\n    { label: 'Friends Made', value: '5', icon: Heart },\n    { label: 'Games Played', value: '24', icon: User },\n  ];\n\n  const menuItems = [\n    { title: 'Edit Profile', icon: Edit, onPress: handleEditProfile },\n    { title: 'Privacy & Safety', icon: Shield, onPress: () => Alert.alert('Coming Soon', 'Privacy settings coming soon!') },\n    { title: 'Settings', icon: Settings, onPress: () => Alert.alert('Coming Soon', 'Settings coming soon!') },\n    { title: 'Help & Support', icon: HelpCircle, onPress: () => Alert.alert('Coming Soon', 'Help center coming soon!') },\n  ];\n\n  if (!user) {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.errorText}>User not found</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"dark\" />\n      \n      <ScrollView contentContainerStyle={styles.content}>\n        {/* Header */}\n        <View style={styles.header}>\n          <View style={styles.avatarContainer}>\n            <View style={styles.avatar}>\n              <Text style={styles.avatarText}>\n                {user.display_name.charAt(0).toUpperCase()}\n              </Text>\n            </View>\n            {user.selfie_verified && (\n              <View style={styles.verifiedBadge}>\n                <Text style={styles.verifiedText}>✓</Text>\n              </View>\n            )}\n          </View>\n          \n          <Text style={styles.displayName}>{user.display_name}</Text>\n          {user.bio && <Text style={styles.bio}>{user.bio}</Text>}\n          \n          {user.interests && user.interests.length > 0 && (\n            <View style={styles.interestsContainer}>\n              {user.interests.slice(0, 3).map((interest) => (\n                <View key={interest} style={styles.interestTag}>\n                  <Text style={styles.interestTagText}>{interest}</Text>\n                </View>\n              ))}\n            </View>\n          )}\n        </View>\n\n        {/* Stats */}\n        <View style={styles.statsContainer}>\n          {stats.map((stat, index) => (\n            <View key={index} style={styles.statItem}>\n              <stat.icon size={20} color=\"#8B5CF6\" />\n              <Text style={styles.statValue}>{stat.value}</Text>\n              <Text style={styles.statLabel}>{stat.label}</Text>\n            </View>\n          ))}\n        </View>\n\n        {/* Menu */}\n        <View style={styles.menuContainer}>\n          {menuItems.map((item, index) => (\n            <TouchableOpacity\n              key={index}\n              style={styles.menuItem}\n              onPress={item.onPress}\n            >\n              <View style={styles.menuItemLeft}>\n                <item.icon size={20} color=\"#64748b\" />\n                <Text style={styles.menuItemText}>{item.title}</Text>\n              </View>\n              <Text style={styles.menuItemArrow}>›</Text>\n            </TouchableOpacity>\n          ))}\n        </View>\n\n        {/* Sign Out */}\n        <TouchableOpacity style={styles.signOutButton} onPress={handleSignOut}>\n          <LogOut size={20} color=\"#ef4444\" />\n          <Text style={styles.signOutText}>Sign Out</Text>\n        </TouchableOpacity>\n\n        {/* App Info */}\n        <View style={styles.appInfo}>\n          <Text style={styles.appInfoText}>ChillConnect v1.0.0</Text>\n          <Text style={styles.appInfoText}>Made with ❤️ for Gen-Z India</Text>\n        </View>\n      </ScrollView>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n  },\n  content: {\n    paddingVertical: 20,\n  },\n  header: {\n    alignItems: 'center',\n    paddingHorizontal: 24,\n    paddingTop: 40,\n    paddingBottom: 32,\n  },\n  avatarContainer: {\n    position: 'relative',\n    marginBottom: 16,\n  },\n  avatar: {\n    width: 80,\n    height: 80,\n    borderRadius: 40,\n    backgroundColor: '#8B5CF6',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  avatarText: {\n    color: '#ffffff',\n    fontSize: 32,\n    fontWeight: 'bold',\n  },\n  verifiedBadge: {\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n    backgroundColor: '#10b981',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 2,\n    borderColor: '#ffffff',\n  },\n  verifiedText: {\n    color: '#ffffff',\n    fontSize: 12,\n    fontWeight: 'bold',\n  },\n  displayName: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1a1a1a',\n    marginBottom: 8,\n  },\n  bio: {\n    fontSize: 16,\n    color: '#64748b',\n    textAlign: 'center',\n    lineHeight: 22,\n    marginBottom: 16,\n  },\n  interestsContainer: {\n    flexDirection: 'row',\n    gap: 8,\n    flexWrap: 'wrap',\n    justifyContent: 'center',\n  },\n  interestTag: {\n    backgroundColor: '#f1f5f9',\n    paddingHorizontal: 12,\n    paddingVertical: 6,\n    borderRadius: 16,\n  },\n  interestTagText: {\n    fontSize: 12,\n    color: '#64748b',\n    fontWeight: '500',\n  },\n  statsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    backgroundColor: '#f8f9fa',\n    marginHorizontal: 24,\n    borderRadius: 16,\n    paddingVertical: 20,\n    marginBottom: 32,\n  },\n  statItem: {\n    alignItems: 'center',\n    gap: 4,\n  },\n  statValue: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#1a1a1a',\n  },\n  statLabel: {\n    fontSize: 12,\n    color: '#64748b',\n    textAlign: 'center',\n  },\n  menuContainer: {\n    marginHorizontal: 24,\n    marginBottom: 32,\n  },\n  menuItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 16,\n    paddingHorizontal: 16,\n    backgroundColor: '#f8f9fa',\n    borderRadius: 12,\n    marginBottom: 8,\n  },\n  menuItemLeft: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 12,\n  },\n  menuItemText: {\n    fontSize: 16,\n    color: '#1a1a1a',\n    fontWeight: '500',\n  },\n  menuItemArrow: {\n    fontSize: 18,\n    color: '#94a3b8',\n  },\n  signOutButton: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    gap: 8,\n    marginHorizontal: 24,\n    paddingVertical: 16,\n    backgroundColor: '#fef2f2',\n    borderRadius: 12,\n    marginBottom: 32,\n  },\n  signOutText: {\n    fontSize: 16,\n    color: '#ef4444',\n    fontWeight: '600',\n  },\n  appInfo: {\n    alignItems: 'center',\n    paddingHorizontal: 24,\n    paddingBottom: 40,\n  },\n  appInfoText: {\n    fontSize: 12,\n    color: '#94a3b8',\n    marginBottom: 4,\n  },\n  errorText: {\n    fontSize: 16,\n    color: '#ef4444',\n    textAlign: 'center',\n    marginTop: 100,\n  },\n});","size_bytes":7784},"VideoHive/app/calling/search.tsx":{"content":"import React, { useEffect, useState } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  Alert,\n  Animated,\n} from 'react-native';\nimport { router } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\nimport { X, Loader } from 'lucide-react-native';\nimport { useCallStore } from '@/store/callStore';\n\nexport default function SearchScreen() {\n  const [searchText, setSearchText] = useState('Searching for someone awesome...');\n  const [dots, setDots] = useState('');\n  const spinValue = new Animated.Value(0);\n  \n  const { isSearching, stopSearch, currentCall } = useCallStore();\n\n  useEffect(() => {\n    // Animate the loading spinner\n    const spinAnimation = Animated.loop(\n      Animated.timing(spinValue, {\n        toValue: 1,\n        duration: 1000,\n        useNativeDriver: true,\n      })\n    );\n    spinAnimation.start();\n\n    // Animate the dots\n    const dotInterval = setInterval(() => {\n      setDots(prev => prev.length >= 3 ? '' : prev + '.');\n    }, 500);\n\n    // Change search text periodically\n    const textOptions = [\n      'Searching for someone awesome...',\n      'Finding your next connection...',\n      'Looking for the perfect match...',\n      'Discovering new friends...',\n    ];\n    \n    let textIndex = 0;\n    const textInterval = setInterval(() => {\n      textIndex = (textIndex + 1) % textOptions.length;\n      setSearchText(textOptions[textIndex]);\n    }, 3000);\n\n    return () => {\n      spinAnimation.stop();\n      clearInterval(dotInterval);\n      clearInterval(textInterval);\n    };\n  }, []);\n\n  useEffect(() => {\n    // Navigate to call screen when a call is found\n    if (currentCall) {\n      router.replace('/calling/video-call');\n    }\n  }, [currentCall]);\n\n  const handleCancel = () => {\n    Alert.alert(\n      'Cancel Search',\n      'Are you sure you want to stop searching?',\n      [\n        { text: 'Keep Searching', style: 'cancel' },\n        { \n          text: 'Cancel', \n          style: 'destructive',\n          onPress: () => {\n            stopSearch();\n            router.back();\n          }\n        },\n      ]\n    );\n  };\n\n  const spin = spinValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '360deg'],\n  });\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n      \n      <View style={styles.content}>\n        <TouchableOpacity style={styles.cancelButton} onPress={handleCancel}>\n          <X size={24} color=\"#ffffff\" />\n        </TouchableOpacity>\n\n        <View style={styles.searchContent}>\n          <Animated.View style={[styles.spinner, { transform: [{ rotate: spin }] }]}>\n            <Loader size={48} color=\"#ffffff\" />\n          </Animated.View>\n          \n          <Text style={styles.searchText}>\n            {searchText}{dots}\n          </Text>\n          \n          <Text style={styles.subtitle}>\n            We're finding someone who shares your interests\n          </Text>\n\n          <View style={styles.tips}>\n            <Text style={styles.tipTitle}>While you wait:</Text>\n            <Text style={styles.tip}>• Make sure you're in a well-lit area</Text>\n            <Text style={styles.tip}>• Check your internet connection</Text>\n            <Text style={styles.tip}>• Think of interesting conversation starters</Text>\n          </View>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#1a1a1a',\n  },\n  content: {\n    flex: 1,\n    paddingHorizontal: 24,\n    paddingVertical: 60,\n  },\n  cancelButton: {\n    alignSelf: 'flex-end',\n    padding: 12,\n    borderRadius: 12,\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n  },\n  searchContent: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 20,\n  },\n  spinner: {\n    marginBottom: 32,\n  },\n  searchText: {\n    fontSize: 24,\n    fontWeight: '600',\n    color: '#ffffff',\n    textAlign: 'center',\n    marginBottom: 16,\n  },\n  subtitle: {\n    fontSize: 16,\n    color: '#cccccc',\n    textAlign: 'center',\n    marginBottom: 48,\n    lineHeight: 22,\n  },\n  tips: {\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\n    borderRadius: 16,\n    padding: 24,\n    width: '100%',\n  },\n  tipTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#ffffff',\n    marginBottom: 16,\n  },\n  tip: {\n    fontSize: 14,\n    color: '#cccccc',\n    marginBottom: 8,\n    lineHeight: 20,\n  },\n});","size_bytes":4414},"VideoHive/app/calling/video-call.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  Alert,\n  Modal,\n  ScrollView,\n} from 'react-native';\nimport { router } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\nimport {\n  Mic,\n  MicOff,\n  Video,\n  VideoOff,\n  Phone,\n  RotateCcw,\n  Heart,\n  Flag,\n  Gamepad2,\n  MessageCircle,\n} from 'lucide-react-native';\nimport { useCallStore } from '@/store/callStore';\nimport { useGameStore } from '@/store/gameStore';\nimport { generateIcebreakers } from '@/lib/groq';\n\nexport default function VideoCallScreen() {\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [showReady, setShowReady] = useState(true);\n  const [bothReady, setBothReady] = useState(false);\n  const [showGameMenu, setShowGameMenu] = useState(false);\n  const [currentIcebreaker, setCurrentIcebreaker] = useState<string | null>(null);\n  const [showReport, setShowReport] = useState(false);\n  \n  const {\n    currentCall,\n    connectedUser,\n    friendPressed,\n    endCall,\n    pressFriend,\n    reportUser,\n  } = useCallStore();\n  \n  const { startGame, isGameActive, gameType } = useGameStore();\n\n  useEffect(() => {\n    // Load initial icebreaker\n    loadIcebreaker();\n    \n    // Simulate ready state after 3 seconds (in real app, wait for actual video ready)\n    const timer = setTimeout(() => {\n      setBothReady(true);\n      setShowReady(false);\n    }, 3000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  const loadIcebreaker = async () => {\n    if (!connectedUser) return;\n    \n    try {\n      const response = await generateIcebreakers({\n        userAInterests: ['music', 'gaming'], // In real app, get from user profile\n        userBInterests: ['movies', 'travel'], // In real app, get from connected user profile\n      });\n      \n      if (response.icebreakers.length > 0) {\n        setCurrentIcebreaker(response.icebreakers[0]);\n      }\n    } catch (error) {\n      console.error('Error loading icebreaker:', error);\n      setCurrentIcebreaker(\"What's your favorite way to spend a weekend?\");\n    }\n  };\n\n  const handleEndCall = () => {\n    Alert.alert(\n      'End Call',\n      'Are you sure you want to end this call?',\n      [\n        { text: 'Cancel', style: 'cancel' },\n        { \n          text: 'End Call', \n          style: 'destructive',\n          onPress: async () => {\n            await endCall();\n            router.replace('/(tabs)');\n          }\n        },\n      ]\n    );\n  };\n\n  const handleFriendPress = async () => {\n    try {\n      await pressFriend();\n      Alert.alert(\n        'Friend Request Sent!',\n        'If they also press the heart button, you\\'ll become friends and can chat later.'\n      );\n    } catch (error: any) {\n      Alert.alert('Error', error.message || 'Failed to send friend request');\n    }\n  };\n\n  const handleStartGame = async (gameType: 'rock_paper_scissors' | 'trivia' | 'emoji_guess') => {\n    if (!currentCall) return;\n    \n    try {\n      await startGame(gameType, currentCall.id);\n      setShowGameMenu(false);\n      router.push(`/calling/games/${gameType}`);\n    } catch (error: any) {\n      Alert.alert('Error', error.message || 'Failed to start game');\n    }\n  };\n\n  const handleReport = async (reason: string, description?: string) => {\n    try {\n      await reportUser(reason, description);\n      Alert.alert('Report Submitted', 'Thank you for helping keep our community safe.');\n      router.replace('/(tabs)');\n    } catch (error: any) {\n      Alert.alert('Error', error.message || 'Failed to submit report');\n    }\n  };\n\n  const renderReadyModal = () => (\n    <Modal visible={showReady} transparent>\n      <View style={styles.readyModalContainer}>\n        <View style={styles.readyModal}>\n          <Text style={styles.readyTitle}>Get Ready!</Text>\n          <Text style={styles.readyText}>\n            Your video will be blurred until both of you are ready\n          </Text>\n          \n          <TouchableOpacity\n            style={styles.readyButton}\n            onPress={() => {\n              setShowReady(false);\n              setBothReady(true);\n            }}\n          >\n            <Text style={styles.readyButtonText}>I'm Ready!</Text>\n          </TouchableOpacity>\n        </View>\n      </View>\n    </Modal>\n  );\n\n  const renderGameMenu = () => (\n    <Modal visible={showGameMenu} animationType=\"slide\" presentationStyle=\"pageSheet\">\n      <View style={styles.gameMenuContainer}>\n        <View style={styles.gameMenuHeader}>\n          <Text style={styles.gameMenuTitle}>Choose a Game</Text>\n          <TouchableOpacity onPress={() => setShowGameMenu(false)}>\n            <Text style={styles.gameMenuClose}>Close</Text>\n          </TouchableOpacity>\n        </View>\n        \n        <ScrollView style={styles.gameMenuContent}>\n          <TouchableOpacity\n            style={styles.gameOption}\n            onPress={() => handleStartGame('rock_paper_scissors')}\n          >\n            <Text style={styles.gameOptionTitle}>✂️ Rock Paper Scissors</Text>\n            <Text style={styles.gameOptionDesc}>Classic game, best of 3 rounds</Text>\n          </TouchableOpacity>\n          \n          <TouchableOpacity\n            style={styles.gameOption}\n            onPress={() => handleStartGame('trivia')}\n          >\n            <Text style={styles.gameOptionTitle}>🧠 Quick Trivia</Text>\n            <Text style={styles.gameOptionDesc}>3 quick questions, test your knowledge</Text>\n          </TouchableOpacity>\n          \n          <TouchableOpacity\n            style={styles.gameOption}\n            onPress={() => handleStartGame('emoji_guess')}\n          >\n            <Text style={styles.gameOptionTitle}>😀 Emoji Guess</Text>\n            <Text style={styles.gameOptionDesc}>Describe words using emojis</Text>\n          </TouchableOpacity>\n        </ScrollView>\n      </View>\n    </Modal>\n  );\n\n  const renderReportModal = () => (\n    <Modal visible={showReport} animationType=\"slide\" presentationStyle=\"pageSheet\">\n      <View style={styles.reportModalContainer}>\n        <View style={styles.reportModalHeader}>\n          <Text style={styles.reportModalTitle}>Report User</Text>\n          <TouchableOpacity onPress={() => setShowReport(false)}>\n            <Text style={styles.reportModalClose}>Cancel</Text>\n          </TouchableOpacity>\n        </View>\n        \n        <ScrollView style={styles.reportModalContent}>\n          {[\n            'Inappropriate behavior',\n            'Harassment',\n            'Spam',\n            'Fake profile',\n            'Underage',\n            'Other',\n          ].map((reason) => (\n            <TouchableOpacity\n              key={reason}\n              style={styles.reportOption}\n              onPress={() => {\n                setShowReport(false);\n                handleReport(reason.toLowerCase().replace(' ', '_'));\n              }}\n            >\n              <Text style={styles.reportOptionText}>{reason}</Text>\n            </TouchableOpacity>\n          ))}\n        </ScrollView>\n      </View>\n    </Modal>\n  );\n\n  if (!currentCall || !connectedUser) {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.errorText}>Call not found</Text>\n        <TouchableOpacity style={styles.backButton} onPress={() => router.back()}>\n          <Text style={styles.backButtonText}>Go Back</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n      \n      {/* Video Views */}\n      <View style={styles.videoContainer}>\n        {/* Remote Video (Main) */}\n        <View style={[styles.remoteVideo, !bothReady && styles.blurredVideo]}>\n          <Text style={styles.videoPlaceholder}>\n            {connectedUser.display_name}'s video\n            {!bothReady ? ' (Blurred)' : ''}\n          </Text>\n        </View>\n        \n        {/* Local Video (Small) */}\n        <View style={[styles.localVideo, !bothReady && styles.blurredVideo]}>\n          <Text style={styles.localVideoText}>\n            You{!bothReady ? ' (Blurred)' : ''}\n          </Text>\n        </View>\n      </View>\n\n      {/* Icebreaker */}\n      {currentIcebreaker && bothReady && (\n        <View style={styles.icebreakerContainer}>\n          <MessageCircle size={16} color=\"#8B5CF6\" />\n          <Text style={styles.icebreakerText}>{currentIcebreaker}</Text>\n          <TouchableOpacity onPress={loadIcebreaker}>\n            <RotateCcw size={16} color=\"#8B5CF6\" />\n          </TouchableOpacity>\n        </View>\n      )}\n\n      {/* Controls */}\n      <View style={styles.controls}>\n        <TouchableOpacity\n          style={[styles.controlButton, isMuted && styles.activeControl]}\n          onPress={() => setIsMuted(!isMuted)}\n        >\n          {isMuted ? <MicOff size={24} color=\"#ffffff\" /> : <Mic size={24} color=\"#ffffff\" />}\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[styles.controlButton, isVideoOff && styles.activeControl]}\n          onPress={() => setIsVideoOff(!isVideoOff)}\n        >\n          {isVideoOff ? <VideoOff size={24} color=\"#ffffff\" /> : <Video size={24} color=\"#ffffff\" />}\n        </TouchableOpacity>\n\n        <TouchableOpacity style={styles.controlButton}>\n          <RotateCcw size={24} color=\"#ffffff\" />\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={styles.controlButton}\n          onPress={() => setShowGameMenu(true)}\n        >\n          <Gamepad2 size={24} color=\"#ffffff\" />\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[styles.controlButton, styles.friendButton, friendPressed && styles.friendPressed]}\n          onPress={handleFriendPress}\n          disabled={friendPressed}\n        >\n          <Heart size={24} color=\"#ffffff\" fill={friendPressed ? \"#ffffff\" : \"none\"} />\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[styles.controlButton, styles.reportButton]}\n          onPress={() => setShowReport(true)}\n        >\n          <Flag size={24} color=\"#ffffff\" />\n        </TouchableOpacity>\n\n        <TouchableOpacity\n          style={[styles.controlButton, styles.endCallButton]}\n          onPress={handleEndCall}\n        >\n          <Phone size={24} color=\"#ffffff\" />\n        </TouchableOpacity>\n      </View>\n\n      {renderReadyModal()}\n      {renderGameMenu()}\n      {renderReportModal()}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#000000',\n  },\n  videoContainer: {\n    flex: 1,\n    position: 'relative',\n  },\n  remoteVideo: {\n    flex: 1,\n    backgroundColor: '#1a1a1a',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  localVideo: {\n    position: 'absolute',\n    top: 60,\n    right: 20,\n    width: 120,\n    height: 160,\n    backgroundColor: '#2a2a2a',\n    borderRadius: 12,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderWidth: 2,\n    borderColor: '#8B5CF6',\n  },\n  blurredVideo: {\n    opacity: 0.5,\n  },\n  videoPlaceholder: {\n    color: '#ffffff',\n    fontSize: 18,\n    fontWeight: '500',\n  },\n  localVideoText: {\n    color: '#ffffff',\n    fontSize: 12,\n    textAlign: 'center',\n  },\n  icebreakerContainer: {\n    position: 'absolute',\n    top: 100,\n    left: 20,\n    right: 20,\n    backgroundColor: 'rgba(255, 255, 255, 0.95)',\n    borderRadius: 16,\n    padding: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 8,\n  },\n  icebreakerText: {\n    flex: 1,\n    fontSize: 14,\n    color: '#1a1a1a',\n    fontWeight: '500',\n  },\n  controls: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 20,\n    paddingVertical: 30,\n    gap: 16,\n  },\n  controlButton: {\n    width: 56,\n    height: 56,\n    borderRadius: 28,\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  activeControl: {\n    backgroundColor: '#ef4444',\n  },\n  friendButton: {\n    backgroundColor: '#10b981',\n  },\n  friendPressed: {\n    backgroundColor: '#059669',\n  },\n  reportButton: {\n    backgroundColor: '#f59e0b',\n  },\n  endCallButton: {\n    backgroundColor: '#ef4444',\n  },\n  readyModalContainer: {\n    flex: 1,\n    backgroundColor: 'rgba(0, 0, 0, 0.8)',\n    justifyContent: 'center',\n    alignItems: 'center',\n    paddingHorizontal: 32,\n  },\n  readyModal: {\n    backgroundColor: '#ffffff',\n    borderRadius: 20,\n    padding: 32,\n    alignItems: 'center',\n    width: '100%',\n  },\n  readyTitle: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#1a1a1a',\n    marginBottom: 16,\n  },\n  readyText: {\n    fontSize: 16,\n    color: '#666',\n    textAlign: 'center',\n    marginBottom: 32,\n    lineHeight: 22,\n  },\n  readyButton: {\n    backgroundColor: '#8B5CF6',\n    paddingVertical: 16,\n    paddingHorizontal: 32,\n    borderRadius: 12,\n  },\n  readyButtonText: {\n    color: '#ffffff',\n    fontSize: 18,\n    fontWeight: '600',\n  },\n  gameMenuContainer: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n  },\n  gameMenuHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 24,\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e9ecef',\n  },\n  gameMenuTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1a1a1a',\n  },\n  gameMenuClose: {\n    fontSize: 16,\n    color: '#8B5CF6',\n    fontWeight: '600',\n  },\n  gameMenuContent: {\n    flex: 1,\n    paddingHorizontal: 24,\n  },\n  gameOption: {\n    backgroundColor: '#f8f9fa',\n    borderRadius: 16,\n    padding: 20,\n    marginVertical: 8,\n  },\n  gameOptionTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1a1a1a',\n    marginBottom: 8,\n  },\n  gameOptionDesc: {\n    fontSize: 14,\n    color: '#666',\n  },\n  reportModalContainer: {\n    flex: 1,\n    backgroundColor: '#ffffff',\n  },\n  reportModalHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 24,\n    paddingVertical: 16,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e9ecef',\n  },\n  reportModalTitle: {\n    fontSize: 18,\n    fontWeight: '600',\n    color: '#1a1a1a',\n  },\n  reportModalClose: {\n    fontSize: 16,\n    color: '#666',\n  },\n  reportModalContent: {\n    flex: 1,\n    paddingHorizontal: 24,\n  },\n  reportOption: {\n    paddingVertical: 20,\n    borderBottomWidth: 1,\n    borderBottomColor: '#e9ecef',\n  },\n  reportOptionText: {\n    fontSize: 16,\n    color: '#1a1a1a',\n  },\n  errorText: {\n    color: '#ffffff',\n    fontSize: 18,\n    textAlign: 'center',\n    marginTop: 100,\n  },\n  backButton: {\n    backgroundColor: '#8B5CF6',\n    paddingVertical: 16,\n    paddingHorizontal: 32,\n    borderRadius: 12,\n    marginHorizontal: 32,\n    marginTop: 32,\n  },\n  backButtonText: {\n    color: '#ffffff',\n    fontSize: 16,\n    fontWeight: '600',\n    textAlign: 'center',\n  },\n});","size_bytes":14792},"VideoHive/app/calling/games/rock_paper_scissors.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  TouchableOpacity,\n  Alert,\n  Animated,\n} from 'react-native';\nimport { router } from 'expo-router';\nimport { StatusBar } from 'expo-status-bar';\nimport { ArrowLeft } from 'lucide-react-native';\nimport { useGameStore } from '@/store/gameStore';\n\ntype Choice = 'rock' | 'paper' | 'scissors';\n\nconst CHOICES: { value: Choice; emoji: string; label: string }[] = [\n  { value: 'rock', emoji: '🪨', label: 'Rock' },\n  { value: 'paper', emoji: '📄', label: 'Paper' },\n  { value: 'scissors', emoji: '✂️', label: 'Scissors' },\n];\n\nexport default function RockPaperScissorsGame() {\n  const [myChoice, setMyChoice] = useState<Choice | null>(null);\n  const [opponentChoice, setOpponentChoice] = useState<Choice | null>(null);\n  const [countdown, setCountdown] = useState(3);\n  const [isCountingDown, setIsCountingDown] = useState(false);\n  const [showResult, setShowResult] = useState(false);\n  const [roundResult, setRoundResult] = useState<'win' | 'lose' | 'tie' | null>(null);\n  \n  const scaleAnim = new Animated.Value(1);\n  \n  const { gameState, updateGameState, endGame } = useGameStore();\n\n  useEffect(() => {\n    // Simulate opponent choice (in real app, this would come from the other player)\n    if (myChoice && !opponentChoice) {\n      const randomChoice = CHOICES[Math.floor(Math.random() * CHOICES.length)].value;\n      setTimeout(() => {\n        setOpponentChoice(randomChoice);\n        determineWinner(myChoice, randomChoice);\n      }, 1000);\n    }\n  }, [myChoice]);\n\n  const startCountdown = () => {\n    setIsCountingDown(true);\n    setCountdown(3);\n    \n    const countdownInterval = setInterval(() => {\n      setCountdown((prev: number) => {\n        if (prev <= 1) {\n          clearInterval(countdownInterval);\n          setIsCountingDown(false);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    // Animate countdown\n    Animated.loop(\n      Animated.sequence([\n        Animated.timing(scaleAnim, { toValue: 1.2, duration: 300, useNativeDriver: true }),\n        Animated.timing(scaleAnim, { toValue: 1, duration: 300, useNativeDriver: true }),\n      ])\n    ).start();\n  };\n\n  const makeChoice = (choice: Choice) => {\n    setMyChoice(choice);\n    setShowResult(false);\n    startCountdown();\n  };\n\n  const determineWinner = (playerChoice: Choice, opponentChoice: Choice) => {\n    let result: 'win' | 'lose' | 'tie';\n    \n    if (playerChoice === opponentChoice) {\n      result = 'tie';\n    } else if (\n      (playerChoice === 'rock' && opponentChoice === 'scissors') ||\n      (playerChoice === 'paper' && opponentChoice === 'rock') ||\n      (playerChoice === 'scissors' && opponentChoice === 'paper')\n    ) {\n      result = 'win';\n    } else {\n      result = 'lose';\n    }\n    \n    setRoundResult(result);\n    setShowResult(true);\n    \n    // Update game state\n    const newState = {\n      ...gameState,\n      round: gameState.round + 1,\n      playerAScore: result === 'win' ? gameState.playerAScore + 1 : gameState.playerAScore,\n      playerBScore: result === 'lose' ? gameState.playerBScore + 1 : gameState.playerBScore,\n    };\n    \n    updateGameState(newState);\n    \n    // Check if game is over\n    if (newState.round > newState.maxRounds || \n        newState.playerAScore >= 2 || \n        newState.playerBScore >= 2) {\n      setTimeout(() => {\n        const gameResult = {\n          winner: newState.playerAScore > newState.playerBScore ? 'player' : 'opponent',\n          finalScore: { player: newState.playerAScore, opponent: newState.playerBScore },\n        };\n        endGame(gameResult);\n        \n        Alert.alert(\n          'Game Over!',\n          `${gameResult.winner === 'player' ? 'You won!' : 'You lost!'} Final score: ${gameResult.finalScore.player} - ${gameResult.finalScore.opponent}`,\n          [{ text: 'OK', onPress: () => router.back() }]\n        );\n      }, 2000);\n    } else {\n      // Reset for next round\n      setTimeout(() => {\n        setMyChoice(null);\n        setOpponentChoice(null);\n        setShowResult(false);\n      }, 3000);\n    }\n  };\n\n  const getChoiceEmoji = (choice: Choice | null) => {\n    return CHOICES.find(c => c.value === choice)?.emoji || '❓';\n  };\n\n  const getResultText = () => {\n    switch (roundResult) {\n      case 'win': return 'You Win This Round! 🎉';\n      case 'lose': return 'You Lose This Round 😔';\n      case 'tie': return 'It\\'s a Tie! 🤝';\n      default: return '';\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"light\" />\n      <View style={styles.header}>\n        <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>\n          <ArrowLeft size={24} color=\"#ffffff\" />\n        </TouchableOpacity>\n        <Text style={styles.title}>Rock Paper Scissors</Text>\n      </View>\n      <View style={styles.gameContent}>\n        {/* Score */}\n        <View style={styles.scoreContainer}>\n          <Text style={styles.scoreText}>\n            Round {gameState?.round || 1} of {gameState?.maxRounds || 3}\n          </Text>\n          <Text style={styles.scoreText}>\n            You {gameState?.playerAScore || 0} - {gameState?.playerBScore || 0} Opponent\n          </Text>\n        </View>\n        {/* Game Area */}\n        <View style={styles.gameArea}>\n          {isCountingDown ? (\n            <Animated.View style={[styles.countdownContainer, { transform: [{ scale: scaleAnim }] }]}> \n              <Text style={styles.countdownText}>{countdown || 'GO!'}</Text>\n            </Animated.View>\n          ) : showResult ? (\n            <View style={styles.resultContainer}>\n              <Text style={styles.resultText}>{getResultText()}</Text>\n              <View style={styles.choicesContainer}>\n                <View style={styles.choiceResult}>\n                  <Text style={styles.choiceLabel}>You</Text>\n                  <Text style={styles.choiceEmoji}>{getChoiceEmoji(myChoice)}</Text>\n                </View>\n                <Text style={styles.vs}>VS</Text>\n                <View style={styles.choiceResult}>\n                  <Text style={styles.choiceLabel}>Opponent</Text>\n                  <Text style={styles.choiceEmoji}>{getChoiceEmoji(opponentChoice)}</Text>\n                </View>\n              </View>\n            </View>\n          ) : (\n            <View style={styles.instructionContainer}>\n              <Text style={styles.instructionText}>\n                {myChoice ? 'Waiting for opponent...' : 'Choose your move!'}\n              </Text>\n            </View>\n          )}\n        </View>\n        {/* Choice Buttons */}\n        {!myChoice && !isCountingDown && (\n          <View style={styles.choicesGrid}>\n            {CHOICES.map((choice) => (\n              <TouchableOpacity\n                key={choice.value}\n                style={styles.choiceButton}\n                onPress={() => makeChoice(choice.value)}\n              >\n                <Text style={styles.choiceButtonEmoji}>{choice.emoji}</Text>\n                <Text style={styles.choiceButtonLabel}>{choice.label}</Text>\n              </TouchableOpacity>\n            ))}\n          </View>\n        )}\n      </View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#1a1a1a',\n  },\n  header: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 20,\n    paddingTop: 60,\n    paddingBottom: 20,\n  },\n  backButton: {\n    padding: 8,\n    marginRight: 16,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#ffffff',\n  },\n  gameContent: {\n    flex: 1,\n    paddingHorizontal: 20,\n  },\n  scoreContainer: {\n    alignItems: 'center',\n    marginBottom: 40,\n  },\n  scoreText: {\n    fontSize: 18,\n    color: '#ffffff',\n    marginBottom: 8,\n  },\n  gameArea: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginBottom: 40,\n  },\n  countdownContainer: {\n    alignItems: 'center',\n  },\n  countdownText: {\n    fontSize: 72,\n    fontWeight: 'bold',\n    color: '#8B5CF6',\n  },\n  resultContainer: {\n    alignItems: 'center',\n  },\n  resultText: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#ffffff',\n    marginBottom: 32,\n    textAlign: 'center',\n  },\n  choicesContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    gap: 32,\n  },\n  choiceResult: {\n    alignItems: 'center',\n  },\n  choiceLabel: {\n    fontSize: 16,\n    color: '#cccccc',\n    marginBottom: 8,\n  },\n  choiceEmoji: {\n    fontSize: 64,\n  },\n  vs: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    color: '#8B5CF6',\n  },\n  instructionContainer: {\n    alignItems: 'center',\n  },\n  instructionText: {\n    fontSize: 24,\n    color: '#ffffff',\n    textAlign: 'center',\n  },\n  choicesGrid: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    paddingBottom: 40,\n  },\n  choiceButton: {\n    backgroundColor: 'rgba(255, 255, 255, 0.1)',\n    borderRadius: 20,\n    padding: 20,\n    alignItems: 'center',\n    width: 100,\n  },\n  choiceButtonEmoji: {\n    fontSize: 48,\n    marginBottom: 8,\n  },\n  choiceButtonLabel: {\n    fontSize: 14,\n    color: '#ffffff',\n    fontWeight: '600',\n  },\n});","size_bytes":9123},"VideoHive/metro.config.js":{"content":"const { getDefaultConfig } = require('expo/metro-config');\nconst path = require('path');\n\nconst config = getDefaultConfig(__dirname);\n\n// Enable web support\nconfig.resolver.platforms = ['ios', 'android', 'native', 'web'];\n\n// Configure path aliases to resolve @/ imports\nconfig.resolver.alias = {\n  '@': path.resolve(__dirname, './'),\n};\n\n// Configure for Replit proxy compatibility\nconfig.server = {\n  ...config.server,\n  host: '0.0.0.0',\n  port: 5000,\n};\n\nmodule.exports = config;","size_bytes":482},"replit.md":{"content":"# ChillConnect - Social Video App\n\n## Overview\nChillConnect is a Gen-Z focused social video calling app that combines random 1:1 video calling (Omegle-style) with mutual friend connections (Tinder/Bumble-style). Built with Expo React Native for cross-platform compatibility with web support.\n\n## Current State\n- ✅ Expo React Native app set up and running\n- ✅ Web development server configured on port 5000  \n- ✅ Environment variables configured for Supabase, Agora, and Groq APIs\n- ✅ Metro bundler configured with path aliases for @/ imports\n- ✅ Production deployment configured for autoscale\n- ✅ Dependencies installed and project building successfully\n\n## Tech Stack\n- **Frontend**: Expo React Native + React Native Web + TypeScript\n- **State Management**: Zustand\n- **Backend**: Supabase (PostgreSQL, Auth, Realtime)\n- **Video Calling**: Agora SDK\n- **AI Features**: Groq API\n- **Navigation**: Expo Router\n- **Icons**: Lucide React Native\n\n## Architecture\n```\nVideoHive/\n├── app/                    # Expo Router pages\n│   ├── (auth)/            # Authentication screens\n│   ├── (tabs)/            # Main app navigation tabs\n│   ├── calling/           # Video calling interface\n│   └── _layout.tsx        # Root layout with auth flow\n├── hooks/                 # Custom React hooks\n├── lib/                   # API clients and utilities\n├── store/                 # Zustand state stores\n├── supabase/              # Database migrations\n└── tests/                 # Test files\n```\n\n## Key Features\n- Random 1:1 video calling with Agora SDK\n- Mutual friend system with private matching\n- In-call mini-games (Rock Paper Scissors, Trivia)\n- AI-powered icebreakers and moderation via Groq\n- User authentication and profile management via Supabase\n- Cross-platform support (Web, iOS, Android)\n\n## Development\n- Web app runs on http://localhost:5000 (port 5000)\n- Hot reloading enabled for development\n- Environment variables managed through Replit Secrets\n- Metro bundler configured for web compatibility\n\n## Deployment\n- Configured for Replit autoscale deployment\n- Build process: `npm run build:web` creates production bundle in `dist/`\n- Serves static files using `serve` package\n- All environment variables automatically available in production\n\n## Recent Changes\n- Fixed Metro configuration to resolve @/ path aliases  \n- Configured web server to work with Replit's proxy environment\n- Set up deployment configuration for production\n- Successfully imported and configured all dependencies\n\n## User Preferences\n- Project successfully imported from GitHub\n- All configuration adapted for Replit environment\n- Development workflow optimized for web preview","size_bytes":2735}},"version":1}